- defaultTab: nodes
  description: |-
    Locates all the relevant infrastructure paths within the connected vCenter or ESX environment
    ---
    ## Requirements
    ### Credentials
    * `keys/vmware/vc-address` - FQDN or IP address of the vCenter server
    * `keys/vmware/vc-user` - User associated with `vc-address`
    * `keys/vmware/vc-password` - Password for vCenter user account
    ### Tooling
    * `govc` command line tool


    ## Functionality
    ```
    - use `govc` to discover all hosts, datastores and networks within the vCenter environment
    - store these as JSON files, to be used as inputs into other services such as provisioning
    ```
  executionEnabled: true
  group: CNC/Setup
  id: 63ea1c17-56d8-4f9e-bb94-e6983f8db3e1
  loglevel: INFO
  name: Discovery vCenter Paths
  nodeFilterEditable: false
  options:
  - enforced: true
    label: Environment
    name: scope
    required: true
    valuesUrl: file:/opt/cw/options/vmw-environments.json
  - enforced: true
    hidden: true
    label: Output Directory
    name: outputdir
    required: true
    value: /opt/cw/tmp
    values:
    - /opt/cw/tmp
    valuesListDelimiter: ','
  - enforced: true
    hidden: true
    name: path
    required: true
    value: /backup/keys/keys/vmware
    values:
    - /backup/keys/keys/vmware
    valuesListDelimiter: ','
  plugins:
    ExecutionLifecycle: {}
  scheduleEnabled: true
  sequence:
    commands:
    - description: Get vars
      plugins:
        LogFilter:
        - config:
            captureMultipleKeysValues: 'true'
            hideOutput: 'false'
            logData: 'true'
            regex: ^(.+?)\s*=\s*(.+)
          type: key-value-data-multilines
      script: "filein=/opt/cw/options/vmw-environments.json\n#jq -r '.[] | select(.name==\"\
        @option.cnc-vip@\").\"mgt-vip\"' /opt/cw/options/cw-environments.json \njq\
        \ --raw-output '.[] | select(.value==\"@option.scope@\") | to_entries[] |\
        \  [.key,.value]|join(\"=\")' $filein"
    - description: Set vars
      plugins:
        LogFilter:
        - config:
            captureMultipleKeysValues: 'true'
            hideOutput: 'false'
            logData: 'true'
            regex: ^(.+?)\s*=\s*(.+)
          type: key-value-data-multilines
      script: |-
        echo GOVC_URL=$(cat @option.path@/@data.proxy*@-vc-address)
        echo GOVC_USERNAME=$(cat @option.path@/@data.proxy*@-vc-user)
        echo GOVC_PASSWORD=$(cat @option.path@/@data.proxy*@-vc-password)
        echo GOVC_INSECURE=1
    - description: Find VC paths
      plugins:
        LogFilter:
        - config:
            captureMultipleKeysValues: 'true'
            hideOutput: 'false'
            logData: 'true'
            regex: ^(.+?)\s*=\s*(.+)
          type: key-value-data-multilines
      script: |-
        export GOVC_URL="@data.GOVC_URL*@"
        export GOVC_USERNAME="@data.GOVC_USERNAME*@"
        export GOVC_PASSWORD="@data.GOVC_PASSWORD*@"
        export GOVC_INSECURE=1
        env|grep -i GOVC

        govc find -k -json . -type h > @option.outputdir@/@option.scope@-hosts.json
        govc find -k -json . -type d > @option.outputdir@/@option.scope@-dcs.json
        govc find -k -json . -type s > @option.outputdir@/@option.scope@-datastores.json
        govc find -k -json . -type n > @option.outputdir@/@option.scope@-networks.json
        #echo @option.type@ >  @option.outputdir@/vmwaretype.json
    - configuration:
        command: bash -c 'if [ "${option.type}" == "vc" ]; then true; else false;
          fi'
      errorhandler:
        keepgoingOnSuccess: true
        script: jq -n '["-ESXHOST-"]' > @option.outputdir@/hosts.json
      nodeStep: true
      type: localexec
    keepgoing: false
    strategy: node-first
  uuid: 63ea1c17-56d8-4f9e-bb94-e6983f8db3e1

