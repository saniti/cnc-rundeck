- defaultTab: nodes
  description: ''
  executionEnabled: true
  id: 3c85fc18-a3b0-4998-80b3-089e2ed6ad99
  loglevel: INFO
  name: NSO Kafka Job
  nodeFilterEditable: false
  options:
  - hidden: true
    name: token
    required: true
    secure: true
    storagePath: keys/gitea/token
    valueExposed: true
  - hidden: true
    name: git
    required: true
    secure: true
    storagePath: keys/git/repo
    valueExposed: true
  - name: git-owners
    required: true
  - name: git-repos
    required: true
  - name: git-branch
    required: true
  - name: git-dirs
    required: true
  - name: raw
  - name: not-before
    required: true
  plugins:
    ExecutionLifecycle: null
  scheduleEnabled: true
  sequence:
    commands:
    - description: Calculate dates and times
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: release
            regex: (.*)
            replaceFilteredResult: 'false'
          type: key-value-data
      script: |
        dttm='@option.not-before@'
        echo $dttm
        dttm2=$(echo $dttm | jq --raw-output --raw-input '. |split("|") | .[0]=.[0]+"Z" | join("|")')
        echo $dttm2
        echo $dttm2 | jq --raw-output --raw-input '.| split("|")[1] as $ampm|(.|split("|")[2]|split("+")[1]) as $offset |  (((($offset|split(":")[0]))|tonumber) | .*3600) as $offset2 | .|split("|")[0] | (fromdateiso8601-$offset2) as $updated | (if $ampm=="pm" then 43200 else 0 end) | $updated+.'
    - description: 'determine # of entries to process'
      plugins:
        LogFilter:
        - config:
            captureMultipleKeysValues: 'true'
            hideOutput: 'false'
            logData: 'true'
            regex: ^(.+?)\s*=\s*(.+)
          type: key-value-data-multilines
      script: |-
        file='@option.raw@'
        echo file is $file
        iter=$(jq -r '.[0]' $file)
        res=$?
        if [ $res == 0 ]; then
            echo result is $res. Entry to be processed is $iter
            echo iter=$iter
        else
            echo result is $res. Nothing else to do
            false
        fi
    - configuration:
        authentication: None
        checkResponseCode: 'true'
        file: /opt/cw/tmp/${job.execid}-gitblob.json
        headers: '{"accept": "application/json","Authorization":"Bearer ${option.token}"}'
        method: GET
        printResponse: 'true'
        printResponseToFile: 'true'
        proxySettings: 'false'
        remoteUrl: ${data.iter*}
        responseCode: '200'
        sslVerify: 'true'
        timeout: '30000'
      description: get Route Policy
      nodeStep: false
      type: edu.ohio.ais.rundeck.HttpWorkflowStepPlugin
    - description: retrieve file names of Template and Policy
      plugins:
        LogFilter:
        - config:
            captureMultipleKeysValues: 'true'
            hideOutput: 'false'
            logData: 'true'
            regex: ^(.+?)\s*=\s*(.+)
          type: key-value-data-multilines
      script: |+
        file=/opt/cw/tmp/@job.execid@-gitblob.json
        jq -r '"git-file="+(.name|tostring)' $file

    - configuration:
        authentication: None
        checkResponseCode: 'true'
        file: /opt/cw/tmp/${job.execid}-service.json
        headers: '{"accept": "application/json","Authorization":"Bearer ${option.token}"}'
        method: GET
        printResponse: 'true'
        printResponseToFile: 'true'
        proxySettings: 'false'
        remoteUrl: ${option.git}/api/v1/repos/${option.git-owners}/${option.git-repos}/raw/${option.git-dirs}/${data.git-file*}?ref=${option.git-branch}
        responseCode: '200'
        sslVerify: 'true'
        timeout: '30000'
      description: get file as JSON
      nodeStep: false
      type: edu.ohio.ais.rundeck.HttpWorkflowStepPlugin
    - description: capture service type
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: serivcetype
            regex: (.*)
            replaceFilteredResult: 'false'
          type: key-value-data
      script: |-
        file=/opt/cw/tmp/@job.execid@-service.json
        jq -r '.|keys[0]|split(":")[1]' $file
    - description: capture JSON data
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: payload
            regex: (.*)
            replaceFilteredResult: 'false'
          type: key-value-data
      script: |+
        file=/opt/cw/tmp/@job.execid@-service.json
        jq -c . $file

    - exec: echo '-key "${data.serivcetype*}"  -customer "service_provisioning" -input
        "${data.payload*}" -release ${data.release*}'
    - description: enqueue to Kafka
      jobref:
        args: -key "${data.serivcetype*}"  -customer "service_provisioning" -input
          "${data.payload*}" -release ${data.release*}
        group: Kafka/99 - Callbacks
        name: Kafka enque
        uuid: cdfdb3e7-cdbd-4d93-a8c0-5ec68acbb139
    - description: More records or end of record set
      errorhandler:
        jobref:
          group: ''
          importOptions: true
          name: NSO Kafka Job
          nodeStep: 'true'
          uuid: 3c85fc18-a3b0-4998-80b3-089e2ed6ad99
        keepgoingOnSuccess: true
      script: "file='@option.raw@'\necho \"@data.iter*@x\"\nif [ \"@data.iter*@x\"\
        \ == \"nullx\" ]; then \n    #true # exit, last record found \n    continue=true\n\
        else \n    #false # continue, found a record\n    updated=$(jq -c '. | del(.[0])'\
        \ $file)\n    echo $updated | jq . > $file\n    continue=false\nfi\n\n$continue"
    keepgoing: false
    strategy: node-first
  uuid: 3c85fc18-a3b0-4998-80b3-089e2ed6ad99

