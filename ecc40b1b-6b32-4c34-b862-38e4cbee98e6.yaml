- defaultTab: nodes
  description: 'Attach the SR policies created in step 2 to the service, with optional
    `dry-run`'
  executionEnabled: true
  group: -DEMO/L2VPN
  id: ecc40b1b-6b32-4c34-b862-38e4cbee98e6
  loglevel: INFO
  name: CNC - L2 Service (step 3 - attach policy to service) v3
  nodeFilterEditable: false
  notification:
    onsuccess:
      email:
        recipients: device-details@necehealthpoc.local
        subject: ${notification.eventStatus} ${job.name}
  notifyAvgDurationThreshold: null
  options:
  - enforced: true
    hidden: true
    name: proxy
    required: true
    value: proxy:3001
    values:
    - proxy:3001
    valuesListDelimiter: ','
  - enforced: true
    label: CW POD
    name: cnc-pod
    required: true
    valuesUrl: file:/opt/cw/options/cw-environments.json
  - enforced: true
    label: Commit Options
    name: dry-run-options
    required: true
    valuesUrl: file:/opt/cw/options/nso-commit-options.json
  - enforced: true
    name: vpn-id
    required: true
    valuesUrl: http://${option.proxy.value}/nso/vpnservices/l2vpn
  - hidden: true
    name: payload
    required: true
    value: '{"ietf-l2vpn-ntw:vpn-service":[{}]}'
  - enforced: true
    label: Device 1 Policy
    name: device-1-policy
    required: true
    valuesUrl: http://${option.proxy.value}/nso/srpolicies
  - enforced: true
    label: Device 2 Policy
    name: device-2-policy
    required: true
    valuesUrl: http://${option.proxy.value}/nso/srpolicies
  plugins:
    ExecutionLifecycle: null
  scheduleEnabled: true
  sequence:
    commands:
    - description: Dry run options
      plugins:
        LogFilter:
        - config:
            captureMultipleKeysValues: 'true'
            hideOutput: 'false'
            logData: 'true'
            regex: ^(.+?)\s*=\s*(.+)
          type: key-value-data-multilines
      script: "if [ \"@option.dry-run-options@\" == \"implementation-plan\" ]\nthen\n\
        \    echo DRY_RUN_COMMAND=\"?dry-run=native\"\n    echo RUN_IMPLEMENTATION_PLAN=false\n\
        elif [ \"@option.dry-run-options@\" == \"commit\" ]\n    then\n        echo\
        \ DRY_RUN_COMMAND=\nelse\n    echo DRY_RUN_COMMAND=\"@option.dry-run-options@\"\
        \n    \nfi\n"
    - description: Update Data
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: object
            regex: (.*)
            replaceFilteredResult: 'false'
          type: key-value-data
      script: "devices=$(curl -s -X GET 'http://apigw:7000/nso/get/ietf-l2vpn-ntw:l2vpn-ntw/vpn-services/vpn-service=@option.vpn-id@'\
        \ | jq -rc '[[..|objects|select(has(\"vpn-node-id\")).\"vpn-node-id\"] | to_entries\
        \ | ..|objects|select(has(\"key\")).key|=.+1] ')\necho $devices | jq -cr '.[]|.value'\n\
        \n#jq --arg devices $devices '$devices'\n\nfor i in `echo $devices | jq -cr\
        \ '.[]|.value'`; do ip=$(curl -s -X GET http://apigw:7000/devices/device/$i\
        \ | jq -cr '(..|objects|select(has(\"address\")).\"address\")'); devices=$(echo\
        \ $devices | jq -c --arg ip $ip --arg node $i '[.[]|select(.value==$node)+={\"\
        ip\":$ip}]'); done\n\necho $devices \n\n#| jq -cr '(..|objects|select(has(\"\
        address\")).\"address\")'); jq -c --arg ip $ip --arg node $i '[.[]|select(.value==$node)+={\"\
        ip\":$ip}]' \n#echo curl -s -X GET http://apigw:7000/devices/device/$i | jq\
        \ -cr '[(..|objects|select(has(\"address\")).\"address\")]'; done\n"
    - description: Update Payload with characteristics (policy name)
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: update-payload
            regex: (.*)
            replaceFilteredResult: 'false'
          type: key-value-data
      script: "payloadout=/opt/cw/tmp/@job.execid@-payload-out.json\npayload='{\"\
        ietf-l2vpn-ntw:vpn-service\":[{\"vpn-nodes\":{\"vpn-node\":[{\"vpn-node-id\"\
        :\"x\",\"cisco-l2vpn-ntw:te-service-mapping\":{\"te-mapping\":{\"sr-policy\"\
        :{}}}},{\"vpn-node-id\":\"y\",\"cisco-l2vpn-ntw:te-service-mapping\":{\"te-mapping\"\
        :{\"sr-policy\":{}}}}]}}]}'\n#echo payload:$payload\n\nmax=$(echo '@data.object*@'\
        \ | jq -c '[..|objects|select(has(\"key\")).key] | max')\necho max:$max\n\n\
        if [ true == true ]\nthen\n\n  res=$(echo $payload | jq -r '(..|objects|select(has(\"\
        vpn-node\")).\"vpn-node\"[0].\"cisco-l2vpn-ntw:te-service-mapping\".\"te-mapping\"\
        .\"sr-policy\")|={\"policy\":\"@option.device-1-policy@\"}')\n  res=$(echo\
        \ $res | jq -r '(..|objects|select(has(\"vpn-node\")).\"vpn-node\"[1].\"cisco-l2vpn-ntw:te-service-mapping\"\
        .\"te-mapping\".\"sr-policy\")|={\"policy\":\"@option.device-2-policy@\"}')\
        \  \necho '@data.object*@' | jq -r --arg inc 1  '($inc|tonumber) as $inc |\
        \ ..|objects|select(has(\"key\") and .key==$inc).value'\n  device1=$(echo\
        \ '@data.object*@' | jq -r --arg inc 1  '($inc|tonumber) as $inc | ..|objects|select(has(\"\
        key\") and .key==$inc).value')\n  res=$(echo $res | jq -r --arg node $device1\
        \ '(..|objects|select(has(\"vpn-node\")).\"vpn-node\"[0].\"vpn-node-id\")|=$node')\
        \ \n\n  device2=$(echo '@data.object*@' | jq -r --arg inc 2  '($inc|tonumber)\
        \ as $inc | ..|objects|select(has(\"key\") and .key==$inc).value')\n  res=$(echo\
        \ $res | jq -r  --arg node $device2 '(..|objects|select(has(\"vpn-node\")).\"\
        vpn-node\"[1].\"vpn-node-id\")|=$node') \n  \nelse\n  res=$(jq -c '.' $payload)\n\
        fi\n\necho $res | jq -c\n\n\n\n\n\n\n"
    - description: generate implementation plan?
      errorhandler:
        jobref:
          args: -friendly-name L2VPN -payload ${data.update-payload*} -service-type
            L2VPN -name ${option.vpn-id} -endpoint /ietf-l2vpn-ntw:l2vpn-ntw/vpn-services/vpn-service=${option.vpn-id}
          group: -DEMO
          importOptions: true
          name: Create dry run exports v2
          nodeStep: 'true'
          uuid: 959f81c1-3640-4765-a15c-e1f2a300f0f2
        keepgoingOnSuccess: true
      script: |+
        @data.RUN_IMPLEMENTATION_PLAN*@



    - jobref:
        group: CNC/Configuration
        importOptions: true
        name: get key vars
        uuid: c3b0db66-3fdd-49b7-a5b5-4261a0ff3463
    - configuration:
        authentication: None
        body: ${data.update-payload*}
        checkResponseCode: 'false'
        headers: |
          {"Content-Type": "application/yang-data+json","Authorization": "Bearer ${export.cwtoken}"}
        method: PATCH
        printResponse: 'true'
        printResponseToFile: 'false'
        proxySettings: 'false'
        remoteUrl: https://${export.mgtvip}:30603/crosswork/proxy/nso/restconf/data/ietf-l2vpn-ntw:l2vpn-ntw/vpn-services/vpn-service=${option.vpn-id}${data.DRY_RUN_COMMAND*}
        sslVerify: 'false'
        timeout: '30000'
      description: Provision Service
      nodeStep: false
      plugins:
        LogFilter:
        - config:
            datatype: application/json
            sanitizeHtml: 'true'
            striped: 'false'
          type: render-datatype
      type: edu.ohio.ais.rundeck.HttpWorkflowStepPlugin
    keepgoing: false
    strategy: node-first
  uuid: ecc40b1b-6b32-4c34-b862-38e4cbee98e6

