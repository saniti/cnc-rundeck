- defaultTab: nodes
  description: |
    Deploy class maps and other QoS to network devices
  executionEnabled: true
  group: -DEMO
  id: 8eaca5fb-2392-4ffe-be8e-141d6f6e46e6
  loglevel: INFO
  name: CNC - Deploy QoS Policies
  nodeFilterEditable: false
  notification:
    onsuccess:
      email:
        recipients: autoamtion@microlab.dcloud.cisco.com
        subject: '${notification.eventStatus} :[${job.name}]: New VPN Definition :
          ${option.customer}-${option.vpn-name}.json'
  notifyAvgDurationThreshold: null
  options:
  - enforced: true
    hidden: true
    name: proxy
    required: true
    value: proxy:3001
    values:
    - proxy:3001
    valuesListDelimiter: ','
  - hidden: true
    name: git
    required: true
    secure: true
    storagePath: keys/git/repo
    valueExposed: true
  - hidden: true
    name: token
    required: true
    secure: true
    storagePath: keys/gitea/token
    valueExposed: true
  - description: '> [Authenticate](96e872a2-5704-4af6-96dc-47758e6049d9)'
    enforced: true
    label: CNC POD
    name: cnc-pod
    required: true
    valuesUrl: file:/opt/cw/options/cw-environments.json
  - description: |-
      > [Add](8e3b0a1a-421c-4d0d-bb2c-c7d0af07116c)|[Remove](eec83222-22a5-46b9-9712-0b869442c27d)
      ## CW/NSO Commit Options
    enforced: true
    label: Customer
    name: customer
    required: true
    valuesUrl: file:/opt/cw/options/customers.json
  - description: '## git options'
    enforced: true
    label: Commit Options
    name: dry-run-options
    required: true
    valuesUrl: file:/opt/cw/options/nso-commit-options.json
  - hidden: true
    name: now
    required: true
    value: ${DATE:yyyy-MM-dd-HH-mm-ss}
  - hidden: true
    name: class-map
    required: true
    value: '{"tailf-ned-cisco-ios-xr:class-map":[{"name":"Best_Effort","prematch":"match-any","match":{"dscp":{"dscp-list":[0]}}},{"name":"Best_Effort_L2","prematch":"match-any","match":{"cos":{"cos-value":[0]},"mpls":{"experimental":{"topmost":[0]}}}},{"name":"Business_Data","prematch":"match-any","match":{"dscp":{"dscp-list":[10,11,12,13,14,15,16,17,18,19,20,21,22,23]}}},{"name":"Business_Data_L2","prematch":"match-any","match":{"cos":{"cos-value":[1,2]},"mpls":{"experimental":{"topmost":[1]}}}},{"name":"EXP1","prematch":"match-any","match":{"qos-group":[1]}},{"name":"EXP3","prematch":"match-any","match":{"qos-group":[3]}},{"name":"EXP5","prematch":"match-any","match":{"qos-group":[5]}},{"name":"PRIORITY","prematch":"match-any","match":{"dscp":{"dscp-list":["cs5","ef"]}}},{"name":"PRIORITY_L2","prematch":"match-any","match":{"cos":{"cos-value":[5]},"mpls":{"experimental":{"topmost":[5]}}}},{"name":"TC1","prematch":"match-any","match":{"cos":{"cos-value":[2]}}},{"name":"TC2","prematch":"match-any","match":{"dscp":{"dscp-list":["af21"]}}},{"name":"TC3","prematch":"match-any","match":{"dscp":{"dscp-list":["af31"]}}},{"name":"VIDEO_L2","prematch":"match-any","match":{"cos":{"cos-value":[3,4]},"mpls":{"experimental":{"topmost":[3]}}}},{"name":"Video","prematch":"match-any","match":{"dscp":{"dscp-list":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]}}}]}'
  - enforced: true
    name: device-type
    required: true
    valuesUrl: http://${option.proxy.value}/devicetypes
  - delimiter: ','
    enforced: true
    multivalueAllSelected: true
    multivalued: true
    name: devices
    required: true
    valuesUrl: http://${option.proxy.value}/devicesbytype/${option.device-type.value}
  - hidden: true
    name: policy-map
    required: true
    value: '{"tailf-ned-cisco-ios-xr:policy-map":[{"name":"Egress-High_Bw_Apps","class":{"class-ref":[{"map":"TC3","bandwidth":{"remaining":{"percent":50}}}],"class-default":[{"map":"class-default"}]}},{"name":"Egress-LowLatency","class":{"class-ref":[{"map":"TC1","police-rate-unit":{"police":{"rate":{"percent":80}}},"priority":{"level":1}}],"class-default":[{"map":"class-default"}]}},{"name":"egress_core","class":{"class-ref":[{"map":"EXP1","set":{"mpls":{"experimental":{"imposition":1}}}},{"map":"EXP3","set":{"mpls":{"experimental":{"imposition":3}}}},{"map":"EXP5","set":{"mpls":{"experimental":{"imposition":5}}}}],"class-default":[{"map":"class-default","set":{"mpls":{"experimental":{"imposition":0}}}}]}},{"name":"ingress_COS1","class":{"class-default":[{"map":"class-default","set":{"qos-group":1}}]}},{"name":"ingress_COS3","class":{"class-default":[{"map":"class-default","set":{"qos-group":3}}]}},{"name":"ingress_COS5","class":{"class-default":[{"map":"class-default","set":{"qos-group":5}}]}},{"name":"ingress_TRUST","class":{"class-ref":[{"map":"PRIORITY","set":{"cos":{"cos-value":5},"qos-group":5}},{"map":"Business_Data","set":{"cos":{"cos-value":6},"qos-group":1}},{"map":"Best_Effort","set":{"cos":{"cos-value":4},"qos-group":0}},{"map":"Video","set":{"cos":{"cos-value":3},"qos-group":3}}],"class-default":[{"map":"class-default"}]}},{"name":"ingress_TRUST_L2","class":{"class-ref":[{"map":"PRIORITY_L2","set":{"qos-group":5}},{"map":"Business_Data_L2","set":{"qos-group":1}},{"map":"VIDEO_L2","set":{"qos-group":3}},{"map":"Best_Effort_L2","set":{"qos-group":0}}],"class-default":[{"map":"class-default"}]}},{"name":"ingress_UNTRUST","class":{"class-default":[{"map":"class-default","set":{"cos":{"cos-value":0},"qos-group":0}}]}}]}'
  plugins:
    ExecutionLifecycle: null
  scheduleEnabled: true
  sequence:
    commands:
    - description: Dry run options
      plugins:
        LogFilter:
        - config:
            captureMultipleKeysValues: 'true'
            hideOutput: 'false'
            logData: 'true'
            regex: ^(.+?)\s*=\s*(.+)
          type: key-value-data-multilines
      script: "if [ \"@option.dry-run-options@\" = \"commit\" ]\nthen\n    echo DRY_RUN_COMMAND=\"\
        ?async-commit-queue=@option.sync-option@\"\n    echo RUN_EXPORT=false    \n\
        else\n    echo DRY_RUN_COMMAND=\"@option.dry-run-options@\"\n    echo RUN_EXPORT=true\n\
        fi"
    - description: Update policy based on device type
      plugins:
        LogFilter:
        - config:
            captureMultipleKeysValues: 'true'
            hideOutput: 'false'
            logData: 'true'
            regex: ^(.+?)\s*=\s*(.+)
          type: key-value-data-multilines
      script: |-
        if [ "@option.device-type@" = "cisco-iosxr" ]
        then
            echo policy-map=$(echo '@option.policy-map@' | jq -c -s '.[][] | {"tailf-ned-cisco-ios-xr:policy-map":.}')
            echo class-map=$(echo '@option.class-map@' | jq -c -s '.[][] | {"tailf-ned-cisco-ios-xr:class-map":.}')
        fi
        if [ "@option.device-type@" = "cisco-ios" ]
        then
            echo policy-map=$(echo '@option.policy-map@' | jq -c -s '.[][] | {"tailf-ned-cisco-ios:policy-map":.}')
            echo class-map=$(echo '@option.class-map@' | jq -c -s '.[][] | {"tailf-ned-cisco-ios:class-map":.}')
        fi
    - description: Show QoS Policies
      script: |-
        echo '@data.class-map*@' | jq -r '(if .[]|type=="object" then "yes" else "no" end) as $x | if $x=="yes" then (.[]| leaf_paths as $path | ($path|join("|")|tostring)+"="+(getpath($path)|tostring) ) else (.| leaf_paths as $path | ($path|join("|")|tostring)+"="+(getpath($path)|tostring) ) end'
        echo '@data.policy-map*@' | jq -r '(if .[]|type=="object" then "yes" else "no" end) as $x | if $x=="yes" then (.[]| leaf_paths as $path | ($path|join("|")|tostring)+"="+(getpath($path)|tostring) ) else (.| leaf_paths as $path | ($path|join("|")|tostring)+"="+(getpath($path)|tostring) ) end'
    - description: device list
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: devices
            regex: (.*)
            replaceFilteredResult: 'false'
          type: key-value-data
      script: 'echo ''@option.devices@'' | jq -c --raw-output --raw-input ''split(",")'''
    - description: Create QoS Payload
      plugins:
        LogFilter:
        - config:
            captureMultipleKeysValues: 'true'
            hideOutput: 'false'
            logData: 'true'
            regex: ^(.+?)\s*=\s*(.+)
          type: key-value-data-multilines
      script: |-
        policies=$(echo '@data.devices*@' | jq '{"tailf-ncs:devices":{"device":[{"name":.[],"config":[@data.policy-map*@,@data.class-map*@]}]}}')

        echo policies=${policies}
    - jobref:
        group: CNC/Configuration
        importOptions: true
        name: get key vars
        project: CNC
        uuid: c3b0db66-3fdd-49b7-a5b5-4261a0ff3463
    - configuration:
        authentication: None
        body: ${data.policies*}
        checkResponseCode: 'false'
        headers: '{''Authorization'': ''Bearer ${export.cwtoken}'',''Content-Type'':
          ''application/yang-data+json''}'
        method: PATCH
        printResponse: 'true'
        printResponseToFile: 'false'
        proxySettings: 'false'
        remoteUrl: https://${export.cwvip}:30603/crosswork/proxy/nso/restconf/data${data.DRY_RUN_COMMAND*}
        sslVerify: 'false'
        timeout: '3000000'
      description: Create Service
      nodeStep: false
      plugins:
        LogFilter:
        - config:
            datatype: application/json
            sanitizeHtml: 'true'
            striped: 'true'
          type: render-datatype
      type: edu.ohio.ais.rundeck.HttpWorkflowStepPlugin
    - description: Update service list
      jobref:
        group: -DEMO
        importOptions: true
        name: CNC - Get CNC Services
        uuid: 9417edf1-10dc-4df8-87d9-04cbeba35b3b
    - configuration:
        fail: 'false'
        halt: 'true'
      description: success
      nodeStep: false
      type: flow-control
    keepgoing: false
    strategy: node-first
  uuid: 8eaca5fb-2392-4ffe-be8e-141d6f6e46e6

