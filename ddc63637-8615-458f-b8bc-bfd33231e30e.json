[ {
  "defaultTab" : "nodes",
  "description" : "Create or modify the SR policy from characteristics entered, with optional `dry-run`. The metric type can be changed and will affect the visualisation of paths in CNC UI.",
  "executionEnabled" : true,
  "group" : "-DEMO/L2VPN",
  "id" : "ddc63637-8615-458f-b8bc-bfd33231e30e",
  "loglevel" : "INFO",
  "name" : "CNC - L2 Service (step 2 - create or modify policy) v2",
  "nodeFilterEditable" : false,
  "notification" : {
    "onsuccess" : {
      "email" : {
        "recipients" : "device-details@necehealthpoc.local",
        "subject" : "${notification.eventStatus} ${job.name}"
      }
    }
  },
  "notifyAvgDurationThreshold" : null,
  "options" : [ {
    "enforced" : true,
    "hidden" : true,
    "name" : "proxy",
    "required" : true,
    "value" : "proxy:3001",
    "values" : [ "proxy:3001" ],
    "valuesListDelimiter" : ","
  }, {
    "enforced" : true,
    "label" : "CW POD",
    "name" : "cnc-pod",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/cw-environments.json"
  }, {
    "enforced" : true,
    "label" : "Commit Options",
    "name" : "dry-run-options",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/nso-commit-options.json"
  }, {
    "enforced" : true,
    "label" : "Existing VPN",
    "name" : "vpn-id",
    "required" : true,
    "valuesUrl" : "http://${option.proxy.value}/nso/vpnservices/l2vpn"
  }, {
    "enforced" : true,
    "name" : "metric-type",
    "value" : "latency",
    "values" : [ "latency", "igp", "te", "hopcount" ],
    "valuesListDelimiter" : ","
  }, {
    "description" : "srte_c_2003_ep_198.19.1.4\nprefixed with _`colour`_ep_`ip-address`",
    "name" : "policy-name",
    "required" : true,
    "value" : "srte"
  }, {
    "name" : "color",
    "required" : true,
    "value" : "2003"
  }, {
    "hidden" : true,
    "name" : "payload",
    "value" : "{\"cisco-sr-te-cfp:sr-te\":{\"cisco-sr-te-cfp-sr-policies:policies\":{\"policy\":[{\"name\":\"srte_c_2003_ep_198.19.1.4\",\"head-end\":[{\"name\":\"Node-5\"}],\"tail-end\":\"198.19.1.4\",\"color\":2003,\"path\":[{\"preference\":101,\"dynamic\":{\"metric-type\":\"latency\",\"pce\":\"\"}}]},{\"name\":\"srte_c_2003_ep_198.19.1.5\",\"head-end\":[{\"name\":\"Node-4\"}],\"tail-end\":\"198.19.1.5\",\"color\":2003,\"path\":[{\"preference\":101,\"dynamic\":{\"metric-type\":\"latency\",\"pce\":\"\"}}]}]}}}"
  }, {
    "hidden" : true,
    "name" : "inner-object",
    "required" : true,
    "value" : "{\"name\":\"srte_c_2003_ep_198.19.1.4\",\"head-end\":[{\"name\":\"Node-5\"}],\"tail-end\":\"198.19.1.4\",\"color\":2003,\"path\":[{\"preference\":101,\"dynamic\":{\"metric-type\":\"latency\",\"pce\":\"\"}}]}",
    "values" : [ "{\"name\":\"srte_c_2003_ep_198.19.1.4\"", "\"head-end\":[{\"name\":\"Node-5\"}]", "\"tail-end\":\"198.19.1.4\"", "\"color\":2003", "\"path\":[{\"preference\":101", "\"dynamic\":{\"metric-type\":\"latency\"", "\"pce\":\"\"}}]}" ],
    "valuesListDelimiter" : ","
  }, {
    "enforced" : true,
    "hidden" : true,
    "name" : "outside-object",
    "required" : true,
    "value" : "{\"cisco-sr-te-cfp:sr-te\":{\"cisco-sr-te-cfp-sr-policies:policies\":{\"policy\":[]}}}",
    "values" : [ "{\"cisco-sr-te-cfp:sr-te\":{\"cisco-sr-te-cfp-sr-policies:policies\":{\"policy\":[]}}}" ],
    "valuesListDelimiter" : ","
  } ],
  "plugins" : {
    "ExecutionLifecycle" : null
  },
  "scheduleEnabled" : true,
  "sequence" : {
    "commands" : [ {
      "description" : "Dry run options",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "false",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "if [ \"@option.dry-run-options@\" == \"implementation-plan\" ]\nthen\n    echo DRY_RUN_COMMAND=\"?dry-run=native\"\n    echo RUN_IMPLEMENTATION_PLAN=false\nelif [ \"@option.dry-run-options@\" == \"commit\" ]\n    then\n        echo DRY_RUN_COMMAND=\nelse\n    echo DRY_RUN_COMMAND=\"@option.dry-run-options@\"\n    \nfi"
    }, {
      "description" : "Update with Device IPs",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "object",
            "regex" : "(.*)",
            "replaceFilteredResult" : "false"
          },
          "type" : "key-value-data"
        } ]
      },
      "script" : "devices=$(curl -s -X GET 'http://apigw:7000/nso/get/ietf-l2vpn-ntw:l2vpn-ntw/vpn-services/vpn-service=@option.vpn-id@' | jq -rc '[[..|objects|select(has(\"vpn-node-id\")).\"vpn-node-id\"] | to_entries | ..|objects|select(has(\"key\")).key|=.+1] ')\necho $devices | jq -cr '.[]|.value'\n\n#jq --arg devices $devices '$devices'\n\nfor i in `echo $devices | jq -cr '.[]|.value'`; do ip=$(curl -s -X GET http://apigw:7000/devices/device/$i | jq -cr '(..|objects|select(has(\"address\")).\"address\")'); devices=$(echo $devices | jq -c --arg ip $ip --arg node $i '[.[]|select(.value==$node)+={\"ip\":$ip}]'); done\n\necho $devices \n\n#| jq -cr '(..|objects|select(has(\"address\")).\"address\")'); jq -c --arg ip $ip --arg node $i '[.[]|select(.value==$node)+={\"ip\":$ip}]' \n#echo curl -s -X GET http://apigw:7000/devices/device/$i | jq -cr '[(..|objects|select(has(\"address\")).\"address\")]'; done\n"
    }, {
      "description" : "test",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "false",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "outer=$(echo '@option.outside-object@')\ninner=$(echo '@option.inner-object@')\n\necho OUTER\necho $outer \necho INNER\necho $inner \necho OBJECT\necho '@data.object*@' \n\nmax=$(echo '@data.object*@' | jq -c '[..|objects|select(has(\"key\")).key] | max')\ncounter=0\npl=$outer\nfor inc in $(seq $max); do\n    echo Counter:$inc\n    \n    modulo=$(expr $inc % 2 + 1)\n    \n    node=$(echo '@data.object*@' | jq -r --arg inc $inc  '($inc|tonumber) as $inc | ..|objects|select(has(\"key\") and .key==$inc).value')\n    ip=$(echo '@data.object*@' | jq -r --arg inc $inc  '($inc|tonumber) as $inc | ..|objects|select(has(\"key\") and .key==$inc).ip')\n    te=$(echo '@data.object*@' | jq -r --arg inc $modulo  '($inc|tonumber) as $inc | ..|objects|select(has(\"key\") and .key==$inc).ip')\n\n    echo MOD:$modulo\n    echo IP:$ip\n    echo ND:$node\n    echo TE:$te\n\n    innerobj=$(echo '@option.inner-object@' | jq -cr --arg node $node '.name|=\"@option.vpn-id@_c_@option.color@_ep_\"+$node')\n    innerobj=$(echo $innerobj | jq -cr --arg node $node '.\"head-end\"[0].name |=$node') \n    innerobj=$(echo $innerobj | jq -cr --arg te $te '.\"tail-end\"|=$te')     \n    innerobj=$(echo $innerobj | jq -cr --arg node $node '.\"color\"|=\"@option.color@\"') \n    innerobj=$(echo $innerobj | jq -cr --arg node $node '.path[0].dynamic.\"metric-type\"|=\"@option.metric-type@\"') \n    innerobj=$(echo $innerobj | jq -cr --arg inc $inc '.path[0].preference|=.+($inc|tonumber)') \n\n    echo INNEROBJ:$innerobj\n\n    \n    pl=$(echo $pl | jq --arg inner $innerobj '(..|objects|select(has(\"policy\")).policy) += ([$inner|fromjson])')\ndone\n\n\necho payload=$(echo $pl | jq -c .)\n"
    }, {
      "description" : "generate implementation plan?",
      "errorhandler" : {
        "jobref" : {
          "args" : "-friendly-name L2VPN -payload ${data.payload*} -service-type L2VPN -name ${option.vpn-id}",
          "group" : "-DEMO",
          "importOptions" : true,
          "name" : "Create dry run exports v2",
          "nodeStep" : "true",
          "uuid" : "959f81c1-3640-4765-a15c-e1f2a300f0f2"
        },
        "keepgoingOnSuccess" : true
      },
      "script" : "@data.RUN_IMPLEMENTATION_PLAN*@"
    }, {
      "jobref" : {
        "group" : "CNC/Configuration",
        "importOptions" : true,
        "name" : "get key vars",
        "uuid" : "c3b0db66-3fdd-49b7-a5b5-4261a0ff3463"
      }
    }, {
      "configuration" : {
        "authentication" : "None",
        "body" : "${data.payload*}",
        "checkResponseCode" : "false",
        "headers" : "{\"Content-Type\": \"application/yang-data+json\",\"Authorization\": \"Bearer ${export.cwtoken}\"}\n\n",
        "method" : "PATCH",
        "printResponse" : "true",
        "printResponseToFile" : "false",
        "proxySettings" : "false",
        "remoteUrl" : "https://${export.mgtvip}:30603/crosswork/proxy/nso/restconf/data${data.DRY_RUN_COMMAND*}",
        "sslVerify" : "false",
        "timeout" : "30000"
      },
      "description" : "Deploy Policy",
      "nodeStep" : false,
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "datatype" : "application/json",
            "sanitizeHtml" : "true",
            "striped" : "true"
          },
          "type" : "render-datatype"
        } ]
      },
      "type" : "edu.ohio.ais.rundeck.HttpWorkflowStepPlugin"
    } ],
    "keepgoing" : false,
    "strategy" : "node-first"
  },
  "uuid" : "ddc63637-8615-458f-b8bc-bfd33231e30e"
} ]
