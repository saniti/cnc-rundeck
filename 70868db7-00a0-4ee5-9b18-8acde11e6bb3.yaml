- defaultTab: nodes
  description: |-
    Deploys OVF files for Cisco Crosswork
    ## Features
    - Create an OVF command line for deploying a single Crosswork VM
  executionEnabled: true
  group: CNC/Deploy/PCE
  id: 70868db7-00a0-4ee5-9b18-8acde11e6bb3
  loglevel: INFO
  maxMultipleExecutions: '0'
  multipleExecutions: true
  name: PCE Deployment
  nodeFilterEditable: false
  options:
  - description: |-
      [Create POD](00a7b4c3-dc1b-4a1a-b4fd-e1f396281b2f) | [Remove POD](e192c0e9-94be-4e0c-ae4a-578e3d0018f5)
      > /opt/cw/options/cw-environments.json
    enforced: true
    label: CNC POD
    name: controller-vip
    required: true
    valuesUrl: file:/opt/cw/options/cw-environments.json
  - description: |-
      Execute command or just generate it.
      - Generate (default) Show the command line that needs to be run, but the user
      - Execute - Generate the command line and run it on the local system
    enforced: true
    name: Option
    required: true
    value: Execute
    values:
    - Execute
    - Generate
    valuesListDelimiter: ','
  - description: |-
      [Create CNC Version](1feb2b38-194d-4427-b9e9-b3c1a031a9b6) | [Remove CNC Version](96b47113-9d8d-4841-8e69-3755d9885e2f)
      > /opt/cw/options/cw-versions.json
    enforced: true
    label: Crosswork Version
    name: cw-version
    required: true
    valuesUrl: file:/opt/cw/options/cw-versions.json
  - description: '- If exists, destory and create new'
    enforced: true
    label: Overwrite Existing
    name: overwrite
    required: true
    value: 'false'
    values:
    - 'false'
    - 'true'
    valuesListDelimiter: ','
  - description: '> [Discover](3ace6b49-f8c9-46f5-acac-8313ca5aa086)'
    enforced: true
    label: Image File
    name: ova-file
    required: true
    valuesUrl: file:/opt/cw/options/images-files-ova.json
  - enforced: true
    label: Deployment Size
    name: deployment-size
    required: true
    value: small
    values:
    - large
    - small
    - singleVM
    valuesListDelimiter: ','
  - enforced: true
    label: Memory
    name: deployment-size-mem
    required: true
    valuesUrl: file:/opt/cw/options/cw-deployment-${option.deployment-size.value}-mem.json
  - enforced: true
    label: CPU
    name: deployment-size-cpu
    required: true
    valuesUrl: file:/opt/cw/options/cw-deployment-${option.deployment-size.value}-cpu.json
  - description: |-
      - thin - lab only, meaning disk is thin provisioned
      - thick - production, meaning disk is fully allocated before usage
    enforced: true
    label: Virtual Disk Mode
    name: disk-mode
    required: true
    value: thin
    values:
    - thick
    - thin
    valuesListDelimiter: ','
  - description: |-
      - IPv4 Network (2 vNIC)
      - IPv4 Network on a Single Interface (1 vNIC) - LAB only.
    enforced: true
    label: Deployment Type
    name: deployment-option
    required: true
    value: cw-ipv4
    valuesUrl: file:/opt/cw/options/cw-deployment-option.json
  - label: CNC hostname
    name: host-name
    value: cw01
  - enforced: true
    label: Role for Netbox
    name: vm-role
    required: true
    value: '1'
    valuesUrl: file:/opt/cw/options/roles.json
  - description: |-
      [Discover](92ae8994-5845-4148-bc98-488d709aca6b)
      > /tmp/datastores.json
    label: VM Datastore
    name: datastore-1
    required: true
    valuesUrl: file:/tmp/datastores.json
  - description: |-
      [Discover](92ae8994-5845-4148-bc98-488d709aca6b)
      > /tmp/hosts.json
    label: VMware ESX host
    name: vmware-esx-host
    required: true
    valuesUrl: file:/tmp/hosts.json
  - description: |-
      [Discover](92ae8994-5845-4148-bc98-488d709aca6b)
      > /tmp/networks.json
    label: Management Network
    name: vnic-1-network
    valuesUrl: file:/tmp/networks.json
  - description: |-
      [Discover](92ae8994-5845-4148-bc98-488d709aca6b)
      > /tmp/networks.json
    label: Data / Device Network
    name: vnic-2-network
    valuesUrl: file:/tmp/networks.json
  - hidden: true
    name: vcenter-host
    secure: true
    storagePath: keys/vmware/vc-address
    valueExposed: true
  - hidden: true
    name: vcenter-password
    required: true
    secure: true
    storagePath: keys/vmware/vc-password
    valueExposed: true
  - hidden: true
    name: vcenter-username
    required: true
    secure: true
    storagePath: keys/vmware/vc-user
    valueExposed: true
  plugins:
    ExecutionLifecycle: null
  scheduleEnabled: true
  sequence:
    commands:
    - description: get POD details
      jobref:
        args: -cnc-pod ${option.controller-vip}
        group: CNC/Configuration
        name: get cnc pod details
        uuid: 0ea1cf89-2324-4106-a507-e934a732da8e
    - description: get version properties
      jobref:
        args: -cnc-version ${option.cw-version}
        group: CNC/Configuration
        name: get version properties
        uuid: a08c2fb8-746f-4d29-8806-c6564f8c8465
    - configuration:
        command: basename "${option.datastore-1}"
      description: generate datastore name
      nodeStep: true
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: datastore-name
            regex: (.*)
          type: key-value-data
      type: localexec
    - configuration:
        command: echo ${option.host-name}
      description: generate host name
      nodeStep: true
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: host-name
            regex: (.*)
          type: key-value-data
      type: localexec
    - configuration:
        command: basename '${option.vnic-1-network}'
      description: generate vnic1 network
      nodeStep: true
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: vnic-1-network
            regex: (.*)
          type: key-value-data
      type: localexec
    - configuration:
        command: basename '${option.vnic-2-network}'
      description: generate vnic2 network
      nodeStep: true
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: vnic-2-network
            regex: (.*)
          type: key-value-data
      type: localexec
    - configuration:
        command: basename "${option.datastore-1}"
      description: datastore
      nodeStep: true
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: datastore
            regex: (.*)
          type: key-value-data
      type: localexec
    - description: DISK
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: DISK
            regex: .*DISK.(\d+).*
          type: key-value-data
      script: |
        echo @option.deploy-option-values@
    - configuration:
        command: bash -c 'if [ "${option.vmware-esx-host}" == "-ESXHOST-" ]; then
          echo ""; else echo "${option.vmware-esx-host}"; fi'
      description: Set host type - ESX or vCenter
      nodeStep: true
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: esx-host
            regex: (.*)
            replaceFilteredResult: 'false'
          type: key-value-data
      type: localexec
    - description: create govc command line
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: command-line
            regex: (.*)
            replaceFilteredResult: 'false'
          type: key-value-data
      script: "export GOVC_URL=@option.vcenter-host@ \nexport GOVC_USERNAME=@option.vcenter-username@\
        \ \nexport GOVC_PASSWORD=@option.vcenter-password@ \nexport GOVC_INSECURE=1\
        \ \nspec=$(govc import.spec \"@option.ova-file@\")  \nchanged=$spec\n# Property\
        \ Mappings\n#changed=$(echo $spec | jq -c '( .PropertyMapping[]|select(.Key==\"\
        ManagementIPv4Address\") ).Value|= \"@data.nic-0-ip*@@export.ip-1@\"') \n\
        #changed=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"ManagementIPv4Netmask\"\
        ) ).Value|= \"@data.nic-0-mask*@\"') \n#changed=$(echo $changed | jq -c '(\
        \ .PropertyMapping[]|select(.Key==\"ManagementIPv4Gateway\") ).Value|= \"\
        @data.nic-0-gw*@@export.gw-1@\"') \n#changed=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"\
        DataIPv4Address\") ).Value|= \"@option.vnic-1-ip@@export.ip-2@\"') \n#changed=$(echo\
        \ $changed | jq -c '( .PropertyMapping[]|select(.Key==\"DataIPv4Netmask\"\
        ) ).Value|= \"@option.vnic-1-mask@\"') \n#changed=$(echo $changed | jq -c\
        \ '( .PropertyMapping[]|select(.Key==\"DataIPv4Gateway\") ).Value|= \"@option.vnic-1-gateway@@export.gw-2@\"\
        ') \n#changed=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"\
        CWUsername\") ).Value|= \"cw-admin\"') \n#changed=$(echo $changed | jq -c\
        \ '( .PropertyMapping[]|select(.Key==\"CWPassword\") ).Value|= \"@option.cw-admin-password@\"\
        ') \n#changed=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"\
        Timezone\") ).Value|= \"@option.timzone*@\"') \n#changed=$(echo $changed |\
        \ jq -c '( .PropertyMapping[]|select(.Key==\"DNSv4\") ).Value|= \"@data.dns-servers*@\"\
        ') \n#changed=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"\
        NTP\") ).Value|= \"@data.ntp-servers*@\"') \n#changed=$(echo $changed | jq\
        \ -c '( .PropertyMapping[]|select(.Key==\"Domain\") ).Value|= \"@option.domain-name@\"\
        ') \n#changed=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"\
        ramdisk\") ).Value|= \"2\"') \n#changed=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"\
        bckup_min_percent\") ).Value|= \"@option.backup-percentage@\"') \n#changed=$(echo\
        \ $changed | jq -c '( .PropertyMapping[]|select(.Key==\"Disclaimer\") ).Value|=\
        \ \"@option.disclaimer@\"') \n#changed=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"\
        VMType\") ).Value|= \"@option.node-type@\"') \n#changed=$(echo $changed |\
        \ jq -c '( .PropertyMapping[]|select(.Key==\"IsSeed\") ).Value|= \"@option.seed-node@\"\
        ') \n#changed=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"\
        ManagementVIP\") ).Value|= \"@export.mgtvip@\"') \n#changed=$(echo $changed\
        \ | jq -c '( .PropertyMapping[]|select(.Key==\"ManagementVIPName\") ).Value|=\
        \ \"@export.mgtdns@\"') \n#changed=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"\
        DataVIP\") ).Value|= \"@export.datavip@\"') \n#changed=$(echo $changed | jq\
        \ -c '( .PropertyMapping[]|select(.Key==\"DataVIPName\") ).Value|= \"@export.datadns@\"\
        ') \n#changed=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"\
        CwInstaller\") ).Value|= \"False\"') \n#changed=$(echo $changed | jq -c '(\
        \ .PropertyMapping[]|select(.Key==\"InitNodeCount\") ).Value|= \"@option.initial-node-count@\"\
        ') \n#changed=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"\
        InitMasterCount\") ).Value|= \"@option.initial-master-count@\"') \n\n# Deleted\
        \ Property Mappings\n#changed=$(echo $changed | jq -c 'del(.PropertyMapping[]|select(.Key==\"\
        NBIVIP\"))' )\n\n# Network Mapping Properties\nchanged=$(echo $changed | jq\
        \ -c '( .NetworkMapping[]|select(.Name==\"MgmtEth0_RP0_CPU0_0\") ).Network|=\
        \ \"@data.vnic-1-network*@\"') \nchanged=$(echo $changed | jq -c '( .NetworkMapping[]|select(.Name==\"\
        CtrlEth\") ).Network|= \"@data.vnic-2-network*@\"') \n\n# General Properties\
        \ thin\nchanged=$(echo $changed | jq -c '.DiskProvisioning=\"@option.disk-mode@\"\
        ') \n#changed=$(echo $changed | jq -c '.Deployment=\"@option.deployment-option@\"\
        ') \nchanged=$(echo $changed | jq -c '.IPAllocationPolicy=\"fixedPolicy\"\
        ') \nchanged=$(echo $changed | jq -c '.Annotation=\"Simon Did This\"') \n\
        changed=$(echo $changed | jq -c '.InjectOvfEnv=true') \nchanged=$(echo $changed\
        \ | jq -c '.Name=\"@data.host-name*@\"') \necho $changed \necho $changed >\
        \ /opt/cw/tmp/@job.execid@\n\nesxhost=$(basename @data.esx-host*@ )\n\necho\
        \ govc import.ova -ds='\"'@data.datastore*@'\"' -host='\"'$esxhost'\"' -name='\"\
        '@data.host-name*@'\"' -options='\"'/opt/cw/tmp/@job.execid@'\"' '\"'@option.ova-file@'\"\
        '\n\n\n"
    - configuration:
        command: bash -c 'if [ "${option.Option}" == "Execute" ]; then false; else
          true; fi'
      description: 'If option is Execute, then run the command'
      errorhandler:
        keepgoingOnSuccess: true
        script: "export GOVC_URL=@option.vcenter-host@ \nexport GOVC_USERNAME=@option.vcenter-username@\
          \ \nexport GOVC_PASSWORD=@option.vcenter-password@ \nexport GOVC_INSECURE=1\
          \ \n\nif [ \"@option.overwrite@\" == \"true\" ]\nthen\n    echo Destroying\
          \ existing VM\n    govc vm.destroy \"@option.host-name@\"\nfi\n\nenv\necho\
          \ @data.command-line*@\n@data.command-line*@\ngovc vm.change -vm \"@data.host-name*@\"\
          \ -c=@option.deployment-size-cpu@ -m=@option.deployment-size-mem@\ngovc\
          \ vm.change -vm \"@data.host-name*@\" -annotation \"Deployed by rundeck\
          \ job: @job.execid@. Image file:@export.cnc-image@\"\ngovc vm.power -on\
          \ \"@data.host-name*@\""
      nodeStep: true
      type: localexec
    - description: Find the POD name from IP
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: pod-name
            regex: (.*)
          type: key-value-data
        - config:
            datatype: application/json
            sanitizeHtml: 'true'
            striped: 'true'
          type: render-datatype
      script: jq '.[] | select(.value=="@option.controller-vip@") | .tag' /opt/cw/options/cw-environments.json
        | tr -d '"'
    - description: create node
      jobref:
        args: '-node-name ${data.host-name*} -hostname ${data.nic-0-ip*} -description
          "CNC node" -user-name cw-admin -tags "cnc,${data.pod-name*}" -password-storage-path
          keys/cw/cw-admin'
        group: Rundeck Nodes
        name: Create a New node
        uuid: e60e849d-c7c2-430e-a545-a2fb9b0a6c61
    keepgoing: false
    strategy: sequential
  uuid: 70868db7-00a0-4ee5-9b18-8acde11e6bb3

