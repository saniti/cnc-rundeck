- defaultTab: nodes
  description: ''
  executionEnabled: true
  group: -DEMO/.working
  id: 7a2d8b60-7e77-4424-b553-2f2b54b8e8e2
  loglevel: INFO
  name: CNC - SR Policies (per service)
  nodeFilterEditable: false
  notification:
    onsuccess:
      email:
        recipients: device-details@necehealthpoc.local
        subject: ${notification.eventStatus} ${job.name}
  notifyAvgDurationThreshold: null
  options:
  - enforced: true
    label: CW POD
    name: cnc-pod
    required: true
    valuesUrl: file:/opt/cw/options/cw-environments.json
  - label: Short name of CNC service
    name: service-name
    required: true
    value: dc-vpn-01
  - description: '> ITEF YANG Model'
    label: YANG path
    name: service-type
    required: true
    value: ietf-l3vpn-ntw:l3vpn-ntw/vpn-services/vpn-service
  plugins:
    ExecutionLifecycle: null
  scheduleEnabled: true
  sequence:
    commands:
    - description: get model name
      plugins:
        LogFilter:
        - config:
            captureMultipleKeysValues: 'true'
            hideOutput: 'false'
            logData: 'true'
            regex: ^(.+?)\s*=\s*(.+)
          type: key-value-data-multilines
      script: echo SERVICEMODEL=@option.service-type@=@option.service-name@
    - jobref:
        group: CNC/Configuration
        importOptions: true
        name: get key vars
        uuid: c3b0db66-3fdd-49b7-a5b5-4261a0ff3463
    - configuration:
        debugOnly: 'false'
      nodeStep: false
      type: log-data-step
    - configuration:
        authentication: None
        body: '{"filterCriteria":{"type":"and","conditionList":[{"type":"equals","name":"linkType","value":"LSP_TYPE_SR"}]},"startRow":0,"endRow":50,"sortColumn":"name","sortAscending":true,"params":{"fullView":false,"linkType":"LSP_TYPE_SR","vpnServiceMap":{"name":"${option.service-name}","yangPath":"${data.SERVICEMODEL*}","isAAInstalled":"true"}},"serviceType":"LSP_TYPE_SR","viewId":"optima"}'
        checkResponseCode: 'false'
        file: /opt/cw/tmp/${job.execid}.json
        headers: |2+
           {"Content-Type": "application/json","Authorization": "Bearer ${export.cwtoken}"}

        method: POST
        printResponse: 'true'
        printResponseToFile: 'true'
        proxySettings: 'false'
        remoteUrl: https://${export.mgtvip}:30603/crosswork/optima/api/v1/services
        sslVerify: 'false'
        timeout: '30000'
      description: get lsp data
      nodeStep: false
      type: edu.ohio.ais.rundeck.HttpWorkflowStepPlugin
    - description: get CSV
      script: |-
        file=/opt/cw/tmp/@job.execid@.json
        #jq -r '.lsps[]| [ keys[] as $k | .[$k] ]| @csv' $file

        #jq -r '[.elements[].attributes]  | (.[0] | keys_unsorted) as $keys |  ([$keys] + map([.[ $keys[] ]])) [] | @csv' $file
        jq -r '[.elements[] | del(.. | ."schema.properties"?)| del(.. | ."documentation"?)|(..|select(has("optimaLastUpdateTimeDelay"))?)."optimaLastUpdateTimeDelay"|=(.|tonumber/1000| gmtime| strflocaltime ("%Y-%m-%dT%H:%M:%SZ")) |(..|select(has("optimaLastUpdate"))?)."optimaLastUpdate"|=(./1000| gmtime| strflocaltime ("%Y-%m-%dT%H:%M:%SZ")) |(..|select(has("optimaPceComputedTime"))?)."optimaPceComputedTime"|=(.|tonumber| gmtime| strflocaltime ("%Y-%m-%dT%H:%M:%SZ")) | [ [leaf_paths as $path | {"key": $path | join("_"), "value": getpath($path)}] | from_entries ] []] |  (.[0] | keys_unsorted) as $keys |   ([$keys] + map([.[ $keys[] ]])) [] | @csv' $file
    keepgoing: false
    strategy: node-first
  uuid: 7a2d8b60-7e77-4424-b553-2f2b54b8e8e2

