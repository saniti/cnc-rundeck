[ {
  "defaultTab" : "nodes",
  "description" : "",
  "executionEnabled" : false,
  "group" : "NSO/Configure",
  "id" : "14aadff3-37d4-43d2-8b8b-7bb425dd7831",
  "loglevel" : "INFO",
  "multipleExecutions" : true,
  "name" : "Configure NSO",
  "nodeFilterEditable" : false,
  "nodefilters" : {
    "dispatch" : {
      "excludePrecedence" : true,
      "keepgoing" : false,
      "rankOrder" : "ascending",
      "successOnEmptyNodeFilter" : false,
      "threadcount" : "1"
    },
    "filter" : "tags: nso"
  },
  "nodesSelectedByDefault" : true,
  "options" : [ {
    "label" : "Crosswork Release",
    "name" : "cw-version",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/cw-versions.json"
  }, {
    "label" : "nso node IP",
    "name" : "nso-ip",
    "required" : true
  }, {
    "description" : "> keys/default/simon",
    "name" : "creds",
    "secure" : true,
    "storagePath" : "keys/default/admin",
    "valueExposed" : true
  }, {
    "label" : "Crosswork user password",
    "name" : "cwpass",
    "required" : true,
    "value" : "cisco!123"
  }, {
    "label" : "Crosswork User Account",
    "name" : "cwuser",
    "required" : true,
    "value" : "cwuser"
  }, {
    "name" : "https-port",
    "value" : "8888"
  }, {
    "name" : "netconf-port",
    "required" : true,
    "value" : "2022"
  } ],
  "plugins" : {
    "ExecutionLifecycle" : null
  },
  "retry" : "0",
  "scheduleEnabled" : true,
  "sequence" : {
    "commands" : [ {
      "description" : "Find management IP",
      "exec" : "echo ${option.nso-ip}",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "ip",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        } ]
      }
    }, {
      "description" : "Create software directory /opt/software/xmlstarlet",
      "exec" : "echo ${option.creds} | sudo -S mkdir -p /opt/software/xmlstarlet"
    }, {
      "description" : "Create software directory /opt/software/packages",
      "exec" : "echo ${option.creds} | sudo -S mkdir -p /opt/software/packages"
    }, {
      "description" : "Set Permissions on directory",
      "exec" : "echo ${option.creds} | sudo -S chmod -R 777 /opt/software/"
    }, {
      "configuration" : {
        "destinationPath" : "/opt/software",
        "echo" : "true",
        "pattern" : "*.*",
        "recursive" : "true",
        "sourcePath" : "/opt/cw/nso/${option.cw-version}/"
      },
      "description" : "Copy data from /opt/cw/nso/40",
      "nodeStep" : true,
      "type" : "copyfile"
    }, {
      "configuration" : {
        "destinationPath" : "/opt/software/packages",
        "echo" : "true",
        "pattern" : "*.*",
        "recursive" : "true",
        "sourcePath" : "/opt/cw/nso/packages/"
      },
      "description" : "Copy package data",
      "nodeStep" : true,
      "type" : "copyfile"
    }, {
      "configuration" : {
        "destinationPath" : "/opt/software/xmlstarlet",
        "echo" : "true",
        "pattern" : "*.*",
        "recursive" : "false",
        "sourcePath" : "/opt/cw/nso/packages/xmlstarlet/"
      },
      "description" : "Copy xmlstarlet",
      "nodeStep" : true,
      "type" : "copyfile"
    }, {
      "description" : "remove python",
      "exec" : "echo ${option.creds} | sudo -S yum remove python3 -y"
    }, {
      "description" : "Install RPMs",
      "exec" : "echo ${option.creds} | sudo -S rpm -Uvh /opt/software/packages/*.rpm"
    }, {
      "description" : "Install xmlstarlet",
      "exec" : "echo ${option.creds} | sudo -S rpm -Uvh /opt/software/xmlstarlet/*.rpm"
    }, {
      "description" : "add security options to /etc/security/limits.conf",
      "script" : "echo @option.creds@ | sudo -S sh -c \"sed -i '/^# End of file/i soft nproc 65535' /etc/security/limits.conf\"\necho @option.creds@ | sudo -S sh -c \"sed -i '/^# End of file/i hard nproc 65535' /etc/security/limits.conf\"\necho @option.creds@ | sudo -S sh -c \"sed -i '/^# End of file/i soft nofile 65535' /etc/security/limits.conf\"\necho @option.creds@ | sudo -S sh -c \"sed -i '/^# End of file/i hard nofile 65535' /etc/security/limits.conf\"\necho @option.creds@ | sudo -S sh -c \"sed -i '/^# End of file/i hard memlock 65535' /etc/security/limits.conf\"\necho @option.creds@ | sudo -S sh -c \"sed -i '/^# End of file/i soft memlock 65535' /etc/security/limits.conf\""
    }, {
      "description" : "reload daemon",
      "exec" : "echo ${option.creds} | sudo -S sysctl -p"
    }, {
      "description" : "determine the NSO version from binary file",
      "exec" : "basename $(ls /opt/software/nso*.bin)",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "nso-ver",
            "regex" : "nso-(.*).linux.*"
          },
          "type" : "key-value-data"
        } ]
      }
    }, {
      "description" : "stop NSO",
      "exec" : "echo ${option.creds} | sudo -S systemctl stop ncs"
    }, {
      "description" : "disable NSO if already installed",
      "exec" : "echo ${option.creds} | sudo -S systemctl disable ncs"
    }, {
      "description" : "remove NSO if already installed",
      "exec" : "echo ${option.creds} | sudo -S rm -rf /opt/ncs/ncs-${data.nso-ver}"
    }, {
      "description" : "remove ncsadmin if installed",
      "exec" : "echo ${option.creds} | sudo -S groupdel ncsadmin"
    }, {
      "description" : "echo ${option.creds} | sudo -S  \\cp /opt/software/*.gz /var/opt/ncs/packages",
      "exec" : "pass on package copy"
    }, {
      "description" : "install NSO as a system install",
      "exec" : "echo ${option.creds} | sudo -S sh /opt/software/${option.nso-ver} --system-install"
    }, {
      "description" : "unpack packages ",
      "exec" : "\"echo ${option.creds} | sudo -S  sh -c 'pushd /opt/software; for i in `ls *.gz`; do tar -xvf \"$i\"; done; popd'\""
    }, {
      "description" : "compile packages \"echo ${option.creds} | sudo -S  sh -c 'pushd /var/opt/ncs/packages; for i in `find . -iname src`; do pushd \"$i\"; make clean all; popd; done'\"",
      "exec" : "echo pass on compiling packages"
    }, {
      "description" : "add ulimit to /etc/init.d/ncs",
      "script" : "echo @option.creds@ | sudo -S sh -c \"sed -i '/^prog=ncs/i ulimit -n 64000' /etc/init.d/ncs\""
    }, {
      "description" : "unpack tsdn package",
      "exec" : "\"echo ${option.creds} | sudo -S  sh -c 'cd /opt/software; tar -xvf *tsdn*'\""
    }, {
      "description" : "copy tsdn packages",
      "exec" : "\"echo ${option.creds} | sudo -S  sh -c 'cd /opt/software/nso-5.7.2.1-tsdn-4.0.0-M5/tsdn/core-fp-packages; for i in `ls *.gz`; do \\cp \"$i\" /opt/ncs/packages; done'\""
    }, {
      "description" : "copy example packages",
      "exec" : "\"echo ${option.creds} | sudo -S  sh -c 'cd /opt/software/nso-5.7.2.1-tsdn-4.0.0-M5/tsdn/example-packages; for i in `ls *.gz`; do \\cp \"$i\" /opt/ncs/packages; done'\""
    }, {
      "description" : "copy other packages",
      "exec" : "\"echo ${option.creds} | sudo -S  sh -c 'cd /opt/software/TM-TC-4.3.0-163/packages; for i in `ls *.gz`; do \\cp \"$i\" /opt/ncs/packages; done'\""
    }, {
      "description" : "copy dlm package",
      "exec" : "\"echo ${option.creds} | sudo -S  sh -c 'cp /opt/software/cw-dlm-fp-4.3.0-nso-5.7.2.1.tar.gz /opt/ncs/packages'"
    }, {
      "description" : "copy device auth package",
      "exec" : "\"echo ${option.creds} | sudo -S  sh -c 'cp /opt/software/cw-na-fp-ca-4.3.0-nso-5.7.2.1.tar.gz /opt/ncs/packages'"
    }, {
      "description" : "create symbolic links",
      "exec" : " \"echo ${option.creds} | sudo -S  sh -c 'cd /opt/ncs/packages; for i in `ls *.gz`; do ln -s \"/opt/ncs/packages/$i\" \"/var/opt/ncs/packages/$i\"; done'\""
    }, {
      "description" : "enable local authentication in ncs.conf",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:local-authentication/x:enabled' --value 'true' /etc/ncs/ncs.conf"
    }, {
      "description" : "enable webUI in ncs.conf",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:enabled' --value 'true' /etc/ncs/ncs.conf"
    }, {
      "description" : "disable non secure web port in ncs.conf",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:transport/x:tcp/x:enabled' --value 'false' /etc/ncs/ncs.conf"
    }, {
      "description" : "enable secure web port in ncs.conf",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:transport/x:ssl/x:enabled' --value 'true' /etc/ncs/ncs.conf"
    }, {
      "description" : "enable restconf in ncs.conf",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:restconf/x:enabled' --value 'true' /etc/ncs/ncs.conf"
    }, {
      "description" : "enable northbound in ncs.conf",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:netconf-north-bound/x:enabled' --value 'true' /etc/ncs/ncs.conf"
    }, {
      "description" : "enable ssh in northbound",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:netconf-north-bound/x:transport/x:ssh/x:enabled' --value 'true' /etc/ncs/ncs.conf"
    }, {
      "description" : "set IP binding to management IP in netconf tcp transport",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:netconf-north-bound/x:transport/x:ssh/x:ip' --value ${data.ip} /etc/ncs/ncs.conf"
    }, {
      "description" : "enable ssh in ncs.conf",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:cli/x:ssh/x:enabled' --value 'true' /etc/ncs/ncs.conf"
    }, {
      "description" : "set https port in ncs.conf",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:transport/x:ssl/x:port' --value ${option.https-port}  /etc/ncs/ncs.conf"
    }, {
      "description" : "set IP binding to management IP for HTTPS in ncs.conf",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:transport/x:ssl/x:ip' --value ${data.ip}  /etc/ncs/ncs.conf"
    }, {
      "description" : "set IP binding for NSO SSH to management address",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:cli/x:ssh/x:ip' --value ${data.ip}  /etc/ncs/ncs.conf"
    }, {
      "description" : "enable service-state-changes in ncs.conf",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update \"/x:ncs-config/x:notifications/x:event-streams/x:stream[x:name='service-state-changes']/x:builtin-replay-store/x:enabled\" -v 'true' /etc/ncs/ncs.conf"
    }, {
      "description" : "hide-group 1 - create",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config -s \"/x:ncs-config\" -t elem -n \"tmp-hide-group\"   /etc/ncs/ncs.conf"
    }, {
      "description" : "hide-group 1 - rename",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:tmp-hide-group\" --type elem --name \"name\" -v \"tsdn\" -r \"/x:ncs-config/x:tmp-hide-group\" -v hide-group  /etc/ncs/ncs.conf"
    }, {
      "description" : "hide-group 2 - create",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config -s \"/x:ncs-config\" -t elem -n \"tmp-hide-group\"    /etc/ncs/ncs.conf"
    }, {
      "description" : "hide-group 2 - rename",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:tmp-hide-group\" --type elem --name \"name\" -v \"fastmap-private\" -r \"/x:ncs-config/x:tmp-hide-group\" -v hide-group  /etc/ncs/ncs.conf"
    }, {
      "description" : "update python timeout value",
      "exec" : "echo ${option.creds} | sudo -S xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:python-vm\" --type elem --name \"start-timeout\" -v \"PT300S\"  /etc/ncs/ncs.conf"
    }, {
      "description" : "Create ncsadmin group",
      "exec" : "echo ${option.creds} | sudo -S groupadd ncsadmin"
    }, {
      "description" : "enable ncs",
      "exec" : "echo ${option.creds} | sudo -S systemctl enable ncs"
    }, {
      "description" : "add this user to the group",
      "exec" : "echo ${option.creds} | sudo -S usermod -a -G ncsadmin $(whoami)"
    }, {
      "description" : "add firewall exception for HTTPS",
      "exec" : "echo ${option.creds} | sudo -S firewall-cmd --zone=public --permanent --add-port ${option.https-port}/tcp"
    }, {
      "description" : "add firewall exception for netconf",
      "exec" : "echo ${option.creds} | sudo -S firewall-cmd --zone=public --permanent --add-port ${option.netconf-port}/tcp"
    }, {
      "description" : "reload firewalld",
      "exec" : "echo ${option.creds} | sudo -S firewall-cmd --reload"
    }, {
      "description" : "create cwuser",
      "exec" : "echo ${option.creds} | sudo -S sh -c \"adduser ${option.cwuser} -s '${option.cwpass}'\""
    }, {
      "description" : "add cwuser to ncsadmin",
      "exec" : "echo ${option.creds} | sudo -S usermod -aG ncsadmin ${option.cwuser}"
    }, {
      "description" : "start ncs",
      "exec" : "echo ${option.creds} | sudo -S systemctl start ncs"
    } ],
    "keepgoing" : true,
    "strategy" : "sequential"
  },
  "timeout" : "1h",
  "uuid" : "14aadff3-37d4-43d2-8b8b-7bb425dd7831"
} ]
