- defaultTab: nodes
  description: ''
  executionEnabled: false
  group: NSO/Configure
  id: 908d8f4c-2b9e-4dcd-9b0d-75605ce7313f
  loglevel: INFO
  multipleExecutions: true
  name: Configure NSO (single node)
  nodeFilterEditable: false
  nodefilters:
    dispatch:
      excludePrecedence: true
      keepgoing: false
      rankOrder: ascending
      successOnEmptyNodeFilter: false
      threadcount: '1'
    filter: 'tags: "nso"'
  nodesSelectedByDefault: false
  options:
  - description: |-
      [Create POD](00a7b4c3-dc1b-4a1a-b4fd-e1f396281b2f) | [Remove POD](e192c0e9-94be-4e0c-ae4a-578e3d0018f5) | [Show PODs](b0afa385-7f61-4852-a2fb-a2ca0ce8e2f7)
      > /opt/cw/options/cw-environments.json
    enforced: true
    label: CNC POD
    name: controller-vip
    required: true
    valuesUrl: file:/opt/cw/options/cw-environments.json
  - description: |-
      [Add Version](1feb2b38-194d-4427-b9e9-b3c1a031a9b6) | [Show Versions](87932153-4882-4b5e-bc8e-321615baa3d6) | [Remove Version](96b47113-9d8d-4841-8e69-3755d9885e2f)
      > /opt/cw/options/cw-versions.json
    enforced: true
    label: Crosswork Version
    name: cw-version
    required: true
    valuesUrl: file:/opt/cw/options/cw-versions.json
  - label: nso node IP
    name: nso-ip
    required: true
  - name: system-user
    required: true
    secure: true
    storagePath: keys/useraccounts/nso-system-user
    valueExposed: true
  - name: system-user-password
    required: true
    secure: true
    storagePath: keys/useraccounts/nso-system-user-password
    valueExposed: true
  - label: Crosswork user password
    name: cwpass
    required: true
    value: cisco!123
  - label: Crosswork User Account
    name: cwuser
    required: true
    value: cwuser
  - name: https-port
    value: '8888'
  - name: netconf-port
    required: true
    value: '2022'
  - enforced: true
    label: Version of Python to install
    name: python-ver
    required: true
    value: 3.8.12
    values:
    - 3.8.12
    valuesListDelimiter: ','
  - delimiter: ','
    multivalueAllSelected: true
    multivalued: true
    name: runstep
    values:
    - python
    - java
    - filecopy
    - nsoremove
    - nsoinstall
    valuesListDelimiter: ','
  plugins:
    ExecutionLifecycle: null
  retry: '0'
  scheduleEnabled: true
  sequence:
    commands:
    - description: install options
      plugins:
        LogFilter:
        - config:
            captureMultipleKeysValues: 'true'
            hideOutput: 'false'
            logData: 'true'
            regex: ^(.+?)\s*=\s*(.+)
          type: key-value-data-multilines
      script: 'echo ''@option.runstep@'' | jq --raw-input --raw-output ''(",") | .[]
        | [.,false]|join("=")'''
    - description: Find management IP
      exec: echo ${option.nso-ip}
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: ip
            regex: (.*)
          type: key-value-data
    - description: Create install dir with permissions
      script: |-
        echo @option.system-user-password@ | sudo -S mkdir -p /opt/software/packages
        echo @option.system-user-password@ | sudo -S chmod -R 777 /opt/software/
    - description: Install updates and packages
      script: |
        echo --- 1/7 APT update
        echo '@option.system-user-password@' | sudo -S apt update -y
        echo --- 2/7 yum yum-utils
        #echo '@option.system-user-password@' | sudo -S apt install -y yum-utils
        echo --- 3/7 epel-release
        #echo '@option.system-user-password@' | sudo -S apt install epel-release -y

        echo --- 5/7 xmlstarlet
        echo '@option.system-user-password@' | sudo -S apt -y install xmlstarlet
        echo --- 6/7 development tools
        echo '@option.system-user-password@' | sudo -S apt -y install build-essential
        echo '@option.system-user-password@' | sudo -S apt -y install make
        echo '@option.system-user-password@' | sudo -S apt -y install ant
    - description: Copy data
      errorhandler:
        configuration:
          destinationPath: /opt/software
          echo: 'true'
          pattern: '*.*'
          recursive: 'true'
          sourcePath: /opt/cw/install/nso/${option.cw-version}/
        keepgoingOnSuccess: true
        nodeStep: true
        type: copyfile
      script: "if [ 1 == 2 ]\nthen \n    false\nelse \n    true\nfi\n\n"
    - description: reload daemon
      exec: echo ${option.system-user-password} | sudo -S sysctl -p
    - description: NSO Properties
      plugins:
        LogFilter:
        - config:
            captureMultipleKeysValues: 'true'
            hideOutput: 'false'
            logData: 'true'
            regex: ^(.+?)\s*=\s*(.+)
          type: key-value-data-multilines
      script: echo nso-file=`basename $(ls /opt/software/nso*.bin) | grep -Eoi 'nso-(.*).linux.*'`
    - description: Undo NSO setup
      script: |-
        source /opt/ncs/current/ncsrc
        "echo '@option.system-user-password@' | sudo -S  sh -c 'cd /opt/ncs/packages/*@data.nso-ver*@*/tsdn/bootstrap-data; for i in `ls *.xml`; do ncs_load -l -m -F x "$i";  done'"
    - description: Unpack and Install NSO
      plugins:
        LogFilter:
        - config:
            captureMultipleKeysValues: 'true'
            hideOutput: 'false'
            logData: 'true'
            regex: ^(.+?)\s*=\s*(.+)
          type: key-value-data-multilines
      script: |+
        # Unpack binary
        cd /opt/software
        nsosigned=`basename $(ls /opt/software/nso*.bin) | grep -Eoi 'nso-(.*).signed.*'`
        sh $nsoinstall --skip-verification
        nsoinstall=`basename $(ls /opt/software/nso*.bin) | grep -Eoi 'nso-(.*).installer.bin'`
        echo nso-signed=$nsosigned
        echo nso-install=$nsoinstall

        # Install NSO
        $nsoinstall --system-install



    - description: add security options to /etc/security/limits.conf
      script: |-
        echo @option.system-user-password@ | sudo -S sh -c "sed -i '/^# End of file/i soft nproc 65535' /etc/security/limits.conf"
        echo @option.system-user-password@ | sudo -S sh -c "sed -i '/^# End of file/i hard nproc 65535' /etc/security/limits.conf"
        echo @option.system-user-password@ | sudo -S sh -c "sed -i '/^# End of file/i soft nofile 65535' /etc/security/limits.conf"
        echo @option.system-user-password@ | sudo -S sh -c "sed -i '/^# End of file/i hard nofile 65535' /etc/security/limits.conf"
        echo @option.system-user-password@ | sudo -S sh -c "sed -i '/^# End of file/i hard memlock 65535' /etc/security/limits.conf"
        echo @option.system-user-password@ | sudo -S sh -c "sed -i '/^# End of file/i soft memlock 65535' /etc/security/limits.conf"
    - description: 'unpack packages '
      exec: '"echo ${option.system-user-password} | sudo -S  sh -c ''pushd /opt/software;
        for i in `ls *.gz`; do tar -xvf "$i" -C /opt/ncs/packages/ > /dev/null; done;
        popd''"'
    - description: unpack tsdn core function packs
      exec: '"echo ${option.system-user-password} | sudo -S  sh -c ''cd /opt/ncs/packages/*${data.nso-ver*}*/tsdn/core-fp-packages;
        for i in `ls *.gz`; do tar -xvf "$i" -C /opt/ncs/packages/ > /dev/null; done''"'
    - description: unpack tsdn example function packs
      exec: '"echo ${option.system-user-password} | sudo -S  sh -c ''cd /opt/ncs/packages/*${data.nso-ver*}*/tsdn/example-packages;
        for i in `ls *.gz`; do tar -xvf "$i" -C /opt/ncs/packages/ > /dev/null; done''"'
    - description: unpack TM packages
      exec: '"echo ${option.system-user-password} | sudo -S  sh -c ''cd /opt/ncs/packages/TM-TC*/packages;
        for i in `ls *.gz`; do tar -xvf "$i" -C /opt/ncs/packages/ > /dev/null; done''"'
    - description: compile packages "echo ${option.system-user-password} | sudo -S  sh
        -c 'pushd /var/opt/ncs/packages; for i in `find . -iname src`; do pushd "$i";
        make clean all; popd; done'"
      exec: echo pass on compiling packages
    - description: 'create symbolic links  '
      exec: '"echo ''${option.system-user-password}'' | sudo -S  sh -c ''cd /opt/ncs/packages;
        for i in *; do ln -s "/opt/ncs/packages/$i" "/var/opt/ncs/packages/$i"; done''"'
    - description: add ulimit to /etc/init.d/ncs
      script: echo '@option.system-user-password@' | sudo -S sh -c "sed -i '/^prog=ncs/i
        ulimit -n 64000' /etc/init.d/ncs"
    - description: enable local authentication in ncs.conf
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet edit --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:local-authentication/x:enabled'
        --value 'true' /etc/ncs/ncs.conf
    - description: enable webUI in ncs.conf
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet edit --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:enabled'
        --value 'true' /etc/ncs/ncs.conf
    - description: disable non secure web port in ncs.conf
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet edit --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:transport/x:tcp/x:enabled'
        --value 'false' /etc/ncs/ncs.conf
    - description: enable secure web port in ncs.conf
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet edit --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:transport/x:ssl/x:enabled'
        --value 'true' /etc/ncs/ncs.conf
    - description: enable restconf in ncs.conf
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet edit --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:restconf/x:enabled'
        --value 'true' /etc/ncs/ncs.conf
    - description: enable northbound in ncs.conf
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet edit --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:netconf-north-bound/x:enabled'
        --value 'true' /etc/ncs/ncs.conf
    - description: enable ssh in northbound
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet edit --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:netconf-north-bound/x:transport/x:ssh/x:enabled'
        --value 'true' /etc/ncs/ncs.conf
    - description: set IP binding to management IP in netconf tcp transport
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet edit --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:netconf-north-bound/x:transport/x:ssh/x:ip'
        --value ${data.ip} /etc/ncs/ncs.conf
    - description: enable ssh in ncs.conf
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet edit --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:cli/x:ssh/x:enabled'
        --value 'true' /etc/ncs/ncs.conf
    - description: set https port in ncs.conf
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet edit --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:transport/x:ssl/x:port'
        --value ${option.https-port}  /etc/ncs/ncs.conf
    - description: set IP binding to management IP for HTTPS in ncs.conf
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet edit --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:transport/x:ssl/x:ip'
        --value ${data.ip}  /etc/ncs/ncs.conf
    - description: set IP binding for NSO SSH to management address
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet edit --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:cli/x:ssh/x:ip'
        --value ${data.ip}  /etc/ncs/ncs.conf
    - description: enable service-state-changes in ncs.conf
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet ed --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --update "/x:ncs-config/x:notifications/x:event-streams/x:stream[x:name='service-state-changes']/x:builtin-replay-store/x:enabled"
        -v 'true' /etc/ncs/ncs.conf
    - description: hide-group 1 - create
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet ed --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config -s "/x:ncs-config" -t elem -n
        "tmp-hide-group"   /etc/ncs/ncs.conf
    - description: hide-group 1 - rename
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet ed --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --subnode "/x:ncs-config/x:tmp-hide-group"
        --type elem --name "name" -v "tsdn" -r "/x:ncs-config/x:tmp-hide-group" -v
        hide-group  /etc/ncs/ncs.conf
    - description: hide-group 2 - create
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet ed --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config -s "/x:ncs-config" -t elem -n
        "tmp-hide-group"    /etc/ncs/ncs.conf
    - description: hide-group 2 - rename
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet ed --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --subnode "/x:ncs-config/x:tmp-hide-group"
        --type elem --name "name" -v "fastmap-private" -r "/x:ncs-config/x:tmp-hide-group"
        -v hide-group  /etc/ncs/ncs.conf
    - description: update python timeout value
      exec: echo ${option.system-user-password} | sudo -S xmlstarlet ed --inplace
        -N x=http://tail-f.com/yang/tailf-ncs-config --subnode "/x:ncs-config/x:python-vm"
        --type elem --name "start-timeout" -v "PT300S"  /etc/ncs/ncs.conf
    - description: Create ncsadmin group
      exec: echo ${option.system-user-password} | sudo -S groupadd ncsadmin
    - description: enable ncs
      exec: echo ${option.system-user-password} | sudo -S systemctl enable ncs
    - description: add this user to the group
      exec: echo ${option.system-user-password} | sudo -S usermod -a -G ncsadmin $(whoami)
    - description: add firewall exception for HTTPS
      exec: echo ${option.system-user-password} | sudo -S firewall-cmd --zone=public
        --permanent --add-port ${option.https-port}/tcp
    - description: add firewall exception for netconf
      exec: echo ${option.system-user-password} | sudo -S firewall-cmd --zone=public
        --permanent --add-port ${option.netconf-port}/tcp
    - description: reload firewalld
      exec: echo ${option.system-user-password} | sudo -S firewall-cmd --reload
    - description: add cwuser and set password
      script: |-
        echo '@option.system-user-password@' | sudo -S useradd @option.cwuser@
        "echo '@option.system-user-password@' | sudo -S "sh -c 'echo @option.cwuser@:@option.cwpass@ | chpasswd'
    - description: add cwuser to ncsadmin
      exec: echo ${option.system-user-password} | sudo -S usermod -aG ncsadmin ${option.cwuser}
    - description: start ncs
      exec: echo ${option.system-user-password} | sudo -S systemctl start ncs
    - description: load merge files
      exec: '"echo ''${option.system-user-password}'' | sudo -S  sh -c ''source /opt/ncs/current/ncsrc;
        cd /opt/ncs/packages/*${data.nso-ver*}*/tsdn/bootstrap-data; for i in `ls
        *.xml`; do ncs_load -l -m -F x "$i";  done''"'
    - script: |-
        source /opt/ncs/current/ncsrc
        "echo '@option.system-user-password@' | sudo -S  sh -c 'cd /opt/ncs/packages/*@data.nso-ver*@*/tsdn/bootstrap-data; for i in `ls *.xml`; do ncs_load -l -m -F x "$i";  done'"
    keepgoing: true
    strategy: sequential
  timeout: 1h
  uuid: 908d8f4c-2b9e-4dcd-9b0d-75605ce7313f

