[ {
  "defaultTab" : "nodes",
  "description" : "Restore a service to CNC from Source Control",
  "executionEnabled" : true,
  "group" : "-DEMO/BackupAndRestore",
  "id" : "43b28c7d-7153-4124-a1e9-c50747123799",
  "loglevel" : "INFO",
  "name" : "RESTORE - Restore a service or configuration from GIT to CNC",
  "nodeFilterEditable" : false,
  "notification" : {
    "onsuccess" : {
      "email" : {
        "recipients" : "device-details@necehealthpoc.local",
        "subject" : "${notification.eventStatus} ${job.name}"
      }
    }
  },
  "notifyAvgDurationThreshold" : null,
  "options" : [ {
    "enforced" : true,
    "hidden" : true,
    "name" : "proxy",
    "required" : true,
    "value" : "proxy:3001",
    "values" : [ "proxy:3001" ],
    "valuesListDelimiter" : ","
  }, {
    "description" : "--- \n## commit options",
    "enforced" : true,
    "label" : "Crosswork POD",
    "name" : "cnc-pod",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/cw-environments.json"
  }, {
    "enforced" : true,
    "label" : "Commit Options",
    "name" : "dry-run-options",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/nso-commit-options.json"
  }, {
    "description" : "---\n## git Repository info",
    "enforced" : true,
    "label" : "Run Compliance Check first?",
    "name" : "config-compliance",
    "required" : true,
    "value" : "no",
    "values" : [ "yes", "no" ],
    "valuesListDelimiter" : ","
  }, {
    "description" : "> Takes preceedence over branch\n---\n## Service Info",
    "label" : "Git TAG",
    "name" : "tag"
  }, {
    "hidden" : true,
    "name" : "git",
    "secure" : true,
    "storagePath" : "keys/git/repo",
    "valueExposed" : true
  }, {
    "hidden" : true,
    "name" : "token",
    "required" : true,
    "secure" : true,
    "storagePath" : "keys/gitea/token",
    "valueExposed" : true
  }, {
    "enforced" : true,
    "label" : "git repo  owner",
    "name" : "git-owners",
    "required" : true,
    "value" : "simon",
    "valuesUrl" : "http://${option.proxy.value}/git/owners"
  }, {
    "enforced" : true,
    "label" : "git repo ",
    "name" : "git-repos",
    "required" : true,
    "valuesUrl" : "http://${option.proxy.value}/git/myrepos/${option.git-owners.value}"
  }, {
    "enforced" : true,
    "label" : "GIT Branch ",
    "name" : "git-branch",
    "required" : true,
    "valuesUrl" : "http://${option.proxy.value}/git/branches/${option.git-owners.value}/${option.git-repos.value}"
  }, {
    "enforced" : true,
    "label" : "Repo directories",
    "name" : "git-dirs",
    "required" : true,
    "valuesUrl" : "http://${option.proxy.value}/git/content/dir/${option.git-owners.value}/${option.git-repos.value}/${option.git-branch.value}"
  }, {
    "enforced" : true,
    "label" : "File / Template",
    "name" : "git-file",
    "required" : true,
    "valuesUrl" : "http://${option.proxy.value}/git/files/${option.git-owners.value}/${option.git-repos.value}/${option.git-branch.value}/${option.git-dirs.value}"
  } ],
  "plugins" : {
    "ExecutionLifecycle" : null
  },
  "scheduleEnabled" : true,
  "sequence" : {
    "commands" : [ {
      "description" : "Dry run options",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "false",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "if [ \"@option.dry-run-options@\" == \"implementation-plan\" ]\nthen\n    echo DRY_RUN_COMMAND=\"?dry-run=native\"\n    echo RUN_IMPLEMENTATION_PLAN=false\nelif [ \"@option.dry-run-options@\" == \"commit\" ]\n    then\n        echo DRY_RUN_COMMAND=\nelse\n    echo DRY_RUN_COMMAND=\"@option.dry-run-options@\"\n    \nfi\n\n\n"
    }, {
      "description" : "Determine if branch or tag",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "false",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "echo tag    : @option.tag@\necho branch : @option.branch@\nif [ ! -z \"@option.tag@\" ]; then\n    echo BRANCHORTAG=@option.tag@\nelse\n    echo BRANCHORTAG=@option.git-branch@\nfi"
    }, {
      "description" : "Determine if in directory or not",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "false",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "echo dirs    : @option.git-dirs@\nif [ \"@option.git-dirs@\" == \"/\" ]; then\n    echo GITDIR=\nelse\n    echo GITDIR=@option.git-dirs@/\nfi"
    }, {
      "configuration" : {
        "authentication" : "None",
        "checkResponseCode" : "false",
        "file" : "/opt/cw/tmp/${job.execid}-git-blob-file.json",
        "headers" : "{\"accept\": \"application/json\",\"Authorization\": \"Bearer ${option.token}\"}",
        "method" : "GET",
        "printResponse" : "true",
        "printResponseToFile" : "true",
        "proxySettings" : "false",
        "remoteUrl" : "${option.git-file}",
        "sslVerify" : "false",
        "timeout" : "30000"
      },
      "description" : "Retrieve file from GIT",
      "nodeStep" : false,
      "type" : "edu.ohio.ais.rundeck.HttpWorkflowStepPlugin"
    }, {
      "description" : "decode file",
      "script" : "file=/opt/cw/tmp/@job.execid@-git-blob-file.json\noutfile=/opt/cw/tmp/@job.execid@-git-json-file.json\njq -r '.content' $file | base64 -d | jq -cr > $outfile\n\n"
    }, {
      "description" : "retrieve file names of Template and Policy",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "false",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "file=/opt/cw/tmp/@job.execid@-git-blob-file.json\njq -r '\"service-file=\"+(.name|tostring)' $file\n\n"
    }, {
      "configuration" : {
        "authentication" : "None",
        "checkResponseCode" : "false",
        "file" : "/opt/cw/tmp/${job.execid}-git-control.json",
        "headers" : "{\"accept\": \"application/json\",\"Authorization\": \"Bearer ${option.token}\"}",
        "method" : "GET",
        "printResponse" : "true",
        "printResponseToFile" : "true",
        "proxySettings" : "false",
        "remoteUrl" : "${option.git}/api/v1/repos/${option.git-owners}/${option.git-repos}/raw/${data.GITDIR*}cnc-services.json?ref=${data.BRANCHORTAG*}",
        "sslVerify" : "false",
        "timeout" : "30000"
      },
      "description" : "get control file",
      "nodeStep" : false,
      "type" : "edu.ohio.ais.rundeck.HttpWorkflowStepPlugin"
    }, {
      "description" : "Determine file properties",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "false",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "file=/opt/cw/tmp/@job.execid@-git-json-file.json\njq -r '.[][] | to_entries[0] | ((\"file-name\")+\"=\"+(.value|tostring)) ' $file\njq -r '.|keys[0] | \"service-type=\"+(.|tostring) ' $file\n"
    }, {
      "description" : "Cleanse file",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "cnc-payload",
            "regex" : "(.*)",
            "replaceFilteredResult" : "false"
          },
          "type" : "key-value-data"
        } ]
      },
      "script" : "file=/opt/cw/tmp/@job.execid@-git-json-file.json\njq -c '. | del(.[][].\"directly-modified\") | del(.[][].\"plan-location\")| del(.[][].\"log\") | del(.[][].\"modified\") | del(.[][].\"commit-queue\")#| .[]' $file"
    }, {
      "description" : "service point",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "false",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "controlfile=/opt/cw/tmp/@job.execid@-git-control.json\njq -r '.[] | select(.name==\"@data.file-name*@\").value | \"servicepoint=\"+(.|tostring)' $controlfile"
    }, {
      "description" : "generate implementation plan?",
      "errorhandler" : {
        "jobref" : {
          "args" : "-friendly-name ${data.file-name*} -payload ${data.cnc-payload*} -service-type ${data.service-type*} -name restore -endpoint ${data.servicepoint*}",
          "group" : "-DEMO",
          "importOptions" : true,
          "name" : "Create dry run exports v2 - PUT",
          "nodeStep" : "true",
          "uuid" : "6d08d0ce-1f26-47a1-b441-93d9d92e6ac0"
        },
        "keepgoingOnSuccess" : true
      },
      "script" : "@data.RUN_IMPLEMENTATION_PLAN*@"
    }, {
      "description" : "Check for compliance check",
      "errorhandler" : {
        "jobref" : {
          "group" : "-DEMO/2-CNC Device",
          "importOptions" : true,
          "name" : "NSO - Check Sync all devices",
          "nodeStep" : "true",
          "uuid" : "fc3cd262-a1ec-47e4-8994-04b62bebdbe9"
        },
        "keepgoingOnSuccess" : true
      },
      "script" : "if [ \"@option.config-compliance@\" == \"yes\" ]; then false; else true; fi"
    }, {
      "description" : "Get CNC Authentication",
      "jobref" : {
        "group" : "CNC/Configuration",
        "importOptions" : true,
        "name" : "get key vars",
        "uuid" : "c3b0db66-3fdd-49b7-a5b5-4261a0ff3463"
      }
    }, {
      "description" : "cnc paylodad",
      "script" : "echo @data.cnc-uri*@\necho '@data.cnc-payload*@' | jq .\n"
    }, {
      "description" : "cnc uri",
      "exec" : "echo https://${export.cwvip}:30603/crosswork/proxy/nso/restconf/data/${data.servicepoint*}${data.DRY_RUN_COMMAND*}",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "cnc-uri",
            "regex" : "(.*)",
            "replaceFilteredResult" : "false"
          },
          "type" : "key-value-data"
        } ]
      }
    }, {
      "configuration" : {
        "authentication" : "None",
        "body" : "${data.cnc-payload*}",
        "checkResponseCode" : "false",
        "headers" : "{'Authorization': 'Bearer ${export.cwtoken}','Content-Type': 'application/yang-data+json'}",
        "method" : "PUT",
        "printResponse" : "true",
        "printResponseToFile" : "false",
        "proxySettings" : "false",
        "remoteUrl" : "${data.cnc-uri*}",
        "sslVerify" : "false",
        "timeout" : "60000"
      },
      "description" : "Restore Service to CNC",
      "nodeStep" : false,
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "datatype" : "application/json",
            "sanitizeHtml" : "true",
            "striped" : "false"
          },
          "type" : "render-datatype"
        } ]
      },
      "type" : "edu.ohio.ais.rundeck.HttpWorkflowStepPlugin"
    } ],
    "keepgoing" : false,
    "strategy" : "node-first"
  },
  "uuid" : "43b28c7d-7153-4124-a1e9-c50747123799"
} ]
