[ {
  "defaultTab" : "nodes",
  "description" : "Deploys OVF files for Cisco Crosswork\n## Features\n- Create an OVF command line for deploying a single Crosswork VM",
  "executionEnabled" : true,
  "group" : "CNC/Deploy/CNC - Dual vNIC",
  "id" : "7004679b-f998-4869-b3e1-4d7d34e9f9c2",
  "loglevel" : "INFO",
  "loglimit" : "2MB",
  "loglimitAction" : "truncate",
  "loglimitStatus" : "failed",
  "maxMultipleExecutions" : "0",
  "multipleExecutions" : true,
  "name" : "CNC - Single Node (1 nic) v2 GOVC Version",
  "nodeFilterEditable" : false,
  "options" : [ {
    "description" : "[Create POD](00a7b4c3-dc1b-4a1a-b4fd-e1f396281b2f) | [Remove POD](e192c0e9-94be-4e0c-ae4a-578e3d0018f5)\n> /opt/cw/options/cw-environments.json",
    "enforced" : true,
    "label" : "CNC POD",
    "name" : "controller-vip",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/cw-environments.json"
  }, {
    "description" : "Execute command or just generate it.\n- Generate (default) Show the command line that needs to be run, but the user\n- Execute - Generate the command line and run it on the local system",
    "enforced" : true,
    "name" : "Option",
    "required" : true,
    "value" : "Execute",
    "values" : [ "Execute", "Generate" ],
    "valuesListDelimiter" : ","
  }, {
    "description" : "[Create CNC Version](1feb2b38-194d-4427-b9e9-b3c1a031a9b6) | [Remove CNC Version](96b47113-9d8d-4841-8e69-3755d9885e2f)\n> /opt/cw/options/cw-versions.json",
    "enforced" : true,
    "label" : "Crosswork Version",
    "name" : "cw-version",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/cw-versions.json"
  }, {
    "description" : "- If exists, destory and create new",
    "enforced" : true,
    "label" : "Overwrite Existing",
    "name" : "overwrite",
    "required" : true,
    "value" : "false",
    "values" : [ "false", "true" ],
    "valuesListDelimiter" : ","
  }, {
    "enforced" : true,
    "label" : "Deployment Size",
    "name" : "deployment-size",
    "required" : true,
    "value" : "small",
    "values" : [ "large", "small", "singleVM" ],
    "valuesListDelimiter" : ","
  }, {
    "enforced" : true,
    "label" : "Memory",
    "name" : "deployment-size-mem",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/cw-deployment-${option.deployment-size.value}-mem.json"
  }, {
    "enforced" : true,
    "label" : "CPU",
    "name" : "deployment-size-cpu",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/cw-deployment-${option.deployment-size.value}-cpu.json"
  }, {
    "description" : "`True` if this is first node, `False` for all other nodes",
    "enforced" : true,
    "label" : "Seed Node?",
    "name" : "seed-node",
    "required" : true,
    "value" : "True",
    "values" : [ "False", "True" ],
    "valuesListDelimiter" : ","
  }, {
    "description" : "`Hybrid`, Master or Worker",
    "enforced" : true,
    "name" : "node-type",
    "required" : true,
    "value" : "Hybrid",
    "values" : [ "Hybrid", "Master", "Standalone", "Worker" ],
    "valuesListDelimiter" : ","
  }, {
    "description" : "> `1` is used for an all-in-one single VM, otherwise `3`",
    "enforced" : true,
    "label" : "Initial Node Count",
    "name" : "initial-node-count",
    "required" : true,
    "value" : "1",
    "values" : [ "1", "3" ],
    "valuesListDelimiter" : ","
  }, {
    "description" : "> `1` is used for an all-in-one single VM, otherwise `3`",
    "enforced" : true,
    "label" : "Initial Master Count",
    "name" : "initial-master-count",
    "required" : true,
    "value" : "1",
    "values" : [ "1", "3" ],
    "valuesListDelimiter" : ","
  }, {
    "description" : "- thin - lab only, meaning disk is thin provisioned\n- thick - production, meaning disk is fully allocated before usage",
    "enforced" : true,
    "label" : "Virtual Disk Mode",
    "name" : "disk-mode",
    "required" : true,
    "value" : "thin",
    "values" : [ "thick", "thin" ],
    "valuesListDelimiter" : ","
  }, {
    "description" : "- IPv4 Network (2 vNIC)\n- IPv4 Network on a Single Interface (1 vNIC) - LAB only.",
    "enforced" : true,
    "label" : "Deployment Type",
    "name" : "deployment-option",
    "required" : true,
    "value" : "1intv4",
    "valuesUrl" : "file:/opt/cw/options/cw-deployment-option.json"
  }, {
    "description" : "default is `50`",
    "label" : "% Reserved for backup",
    "name" : "backup-percentage",
    "required" : true,
    "value" : "50",
    "values" : [ "20", "50" ],
    "valuesListDelimiter" : ","
  }, {
    "delimiter" : ",",
    "description" : "If planning to change the VM resources, ensure \"PowerON\" is not selected. After deployment, govc will modify the resources.",
    "multivalued" : true,
    "name" : "ovf-options",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/ovf-deploy-options.json"
  }, {
    "label" : "OVF Extra Configuration Options",
    "name" : "ovf-extra-config",
    "required" : true,
    "value" : "default",
    "values" : [ "advanced", "default" ],
    "valuesListDelimiter" : ","
  }, {
    "delimiter" : ",",
    "enforced" : true,
    "multivalued" : true,
    "name" : "ovf-extra-config-options",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/extra-config-options.${option.ovf-extra-config.value}.json"
  }, {
    "label" : "CNC hostname",
    "name" : "host-name",
    "value" : "cw01"
  }, {
    "enforced" : true,
    "label" : "Role for Netbox",
    "name" : "vm-role",
    "required" : true,
    "value" : "1",
    "valuesUrl" : "file:/opt/cw/options/roles.json"
  }, {
    "description" : "> /opt/cw/options/timezones.json",
    "label" : "Time Zones",
    "name" : "timzone",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/timezones.json"
  }, {
    "description" : "DNS Domain name as defined in DNS. This should be pre-existing\n[Add Domain](6efb3fef-2883-4fc8-b78a-3661bad4fca3) | [Remove Domain]\n> /opt/cw/options/domains.json",
    "label" : "Domain Name",
    "name" : "domain-name",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/domains.json"
  }, {
    "description" : "If present, it must be existing and resolvable. Otherwise keep blank to use by IP\n> If it does not exist then the deployment will fail.",
    "hidden" : true,
    "label" : "Controller IP DNS Name",
    "name" : "controller-vip-name",
    "required" : true,
    "value" : "${option.controller-vip}"
  }, {
    "description" : "If present, it must be existing and resolvable. Otherwise keep blank to use by IP\n> If it does not exist then the deployment will fail.",
    "hidden" : true,
    "label" : "Data VIP DNS Name",
    "name" : "data-vip-name",
    "required" : true,
    "value" : "${option.controller-vip}"
  }, {
    "hidden" : true,
    "label" : "Data VIP",
    "name" : "data-vip",
    "required" : true,
    "value" : "${option.controller-vip}"
  }, {
    "delimiter" : ",",
    "description" : "> /opt/cw/dns-server.json\nSelect `new value` to add temporary entry [Add DNS](678c8725-fd1d-4849-b7dd-787aa192563a) | [Remove DNS](e206dab8-cf07-459a-accd-37156c9537d6)",
    "label" : "DNS Server",
    "multivalued" : true,
    "name" : "dns-server",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/dns-servers.json"
  }, {
    "delimiter" : ",",
    "description" : "> /opt/cw/ntp-servers.json\nSelect `new value` to add new temporary entry (IP or DNS) > [Add](f2f0c08a-d980-436d-9ce9-17e801dc38d3)",
    "label" : "NTP Server",
    "multivalued" : true,
    "name" : "ntp-server",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/ntp-servers.json"
  }, {
    "delimiter" : ",",
    "enforced" : true,
    "label" : "Virtual Networking Options",
    "multivalued" : true,
    "name" : "vnic-options",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/vnic-options.json"
  }, {
    "description" : "[Discover](92ae8994-5845-4148-bc98-488d709aca6b)\n> /tmp/datastores.json",
    "label" : "VM Datastore",
    "name" : "datastore-1",
    "required" : true,
    "valuesUrl" : "file:/tmp/datastores.json"
  }, {
    "description" : "[Discover](92ae8994-5845-4148-bc98-488d709aca6b)\n> /tmp/hosts.json",
    "label" : "VMware ESX host",
    "name" : "vmware-esx-host",
    "required" : true,
    "valuesUrl" : "file:/tmp/hosts.json"
  }, {
    "description" : "[Discover](92ae8994-5845-4148-bc98-488d709aca6b)\n> /tmp/networks.json",
    "label" : "Management Network",
    "name" : "vnic-1-network",
    "valuesUrl" : "file:/tmp/networks.json"
  }, {
    "hidden" : true,
    "name" : "cw-admin-password",
    "required" : true,
    "secure" : true,
    "storagePath" : "keys/cw/cw-admin",
    "valueExposed" : true
  }, {
    "hidden" : true,
    "name" : "admin-password",
    "required" : true,
    "secure" : true,
    "storagePath" : "keys/cw/admin",
    "valueExposed" : true
  }, {
    "hidden" : true,
    "name" : "vcenter-host",
    "secure" : true,
    "storagePath" : "keys/vmware/vc-address",
    "valueExposed" : true
  }, {
    "hidden" : true,
    "name" : "vcenter-password",
    "required" : true,
    "secure" : true,
    "storagePath" : "keys/vmware/vc-password",
    "valueExposed" : true
  }, {
    "hidden" : true,
    "name" : "vcenter-username",
    "required" : true,
    "secure" : true,
    "storagePath" : "keys/vmware/vc-user",
    "valueExposed" : true
  }, {
    "description" : "***Dynamic*** - IP Addressing from Netbox\n***Static*** - IP Addressing entered by user",
    "enforced" : true,
    "label" : "Network Options for Management Network",
    "name" : "vnic-0-static",
    "required" : true,
    "value" : "static",
    "values" : [ "dynamic", "static" ],
    "valuesListDelimiter" : ","
  }, {
    "description" : "IP Address for Management Interface",
    "label" : "Management - IP",
    "name" : "vnic-0-ip",
    "required" : true
  }, {
    "description" : "Subnet Mask",
    "label" : "Management - Mask",
    "name" : "vnic-0-mask",
    "required" : true,
    "value" : "255.255.255.0"
  }, {
    "description" : "Gateway IP",
    "label" : "Management - Gateway",
    "name" : "vnic-0-gateway",
    "required" : true
  }, {
    "description" : "[Create Disclaimer](be73cb22-c982-4c92-b174-94adc223498a) | [Remove Disclaimer](599a8731-26e5-4504-b412-1dcb27422c5f)\n> /opt/cw/options/disclaimers.json",
    "label" : "User Disclaimer",
    "name" : "disclaimer",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/disclaimers.json"
  } ],
  "plugins" : {
    "ExecutionLifecycle" : null
  },
  "scheduleEnabled" : true,
  "sequence" : {
    "commands" : [ {
      "description" : "get POD details",
      "jobref" : {
        "args" : "-cnc-pod ${option.controller-vip}",
        "group" : "CNC/Configuration",
        "name" : "get cnc pod details",
        "uuid" : "0ea1cf89-2324-4106-a507-e934a732da8e"
      }
    }, {
      "description" : "get version properties",
      "jobref" : {
        "args" : "-cnc-version ${option.cw-version}",
        "group" : "CNC/Configuration",
        "name" : "get version properties",
        "uuid" : "a08c2fb8-746f-4d29-8806-c6564f8c8465"
      }
    }, {
      "configuration" : {
        "command" : "cat /tmp/vmwaretype.json"
      },
      "description" : "VM type",
      "nodeStep" : true,
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "vmware-type",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        } ]
      },
      "type" : "localexec"
    }, {
      "configuration" : {
        "command" : "basename \"${option.datastore-1}\""
      },
      "description" : "generate datastore name",
      "nodeStep" : true,
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "datastore-name",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        } ]
      },
      "type" : "localexec"
    }, {
      "configuration" : {
        "command" : "echo ${option.controller-vip}-${option.cw-version}-${option.host-name}"
      },
      "description" : "generate host name",
      "nodeStep" : true,
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "host-name",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        } ]
      },
      "type" : "localexec"
    }, {
      "configuration" : {
        "command" : "basename '${option.vnic-1-network}'"
      },
      "description" : "generate vnic1 network",
      "nodeStep" : true,
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "vnic-1-network",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        } ]
      },
      "type" : "localexec"
    }, {
      "configuration" : {
        "command" : "basename \"${option.datastore-1}\""
      },
      "description" : "datastore",
      "nodeStep" : true,
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "datastore",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        } ]
      },
      "type" : "localexec"
    }, {
      "description" : "ovf-options",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "ovf-options",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        } ]
      },
      "script" : "echo @option.ovf-options@ | tr \",\" \" \"\n"
    }, {
      "description" : "flatten ovf extra config",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "ovf-extra-config-init",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        } ]
      },
      "script" : "echo @option.ovf-extra-config-options@ | tr \",\" \" \" | tr \"default\" \" \""
    }, {
      "description" : "flatten ntp servers",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "ntp-servers",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        } ]
      },
      "script" : "echo @option.ntp-server@ | tr \",\" \" \""
    }, {
      "description" : "flatten dns servers",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "dns-servers",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        } ]
      },
      "script" : "echo @option.dns-server@ | tr \",\" \" \""
    }, {
      "description" : "DISK",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "DISK",
            "regex" : ".*DISK.(\\d+).*"
          },
          "type" : "key-value-data"
        } ]
      },
      "script" : "echo @option.deploy-option-values@\n"
    }, {
      "configuration" : {
        "command" : "bash -c 'if [ \"${option.vnic-0-static}\" == \"static\" ]; then echo ${option.vnic-0-ip},${option.vnic-0-mask},${option.vnic-0-gateway}; else false; fi'"
      },
      "description" : "0",
      "errorhandler" : {
        "jobref" : {
          "args" : "-search_tag cnc-mgmt -ifnum 1 -state reserved -description ${option.host-name}",
          "group" : "Netbox",
          "name" : "GET Next IP",
          "uuid" : "0ff19321-403f-42bd-9ac1-ed2a4507b496"
        },
        "keepgoingOnSuccess" : true
      },
      "nodeStep" : true,
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "nic-0-ip",
            "regex" : "(.+),.*,.*"
          },
          "type" : "key-value-data"
        }, {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "nic-0-mask",
            "regex" : ".*,(.+),.*"
          },
          "type" : "key-value-data"
        }, {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "nic-0-gw",
            "regex" : ".*,.*,(.+)"
          },
          "type" : "key-value-data"
        } ]
      },
      "type" : "localexec"
    }, {
      "configuration" : {
        "command" : "bash -c 'if [ \"${option.vnic-0-static}\" != \"static\" ]; then echo \"255.255.255.0\"; else true; fi'"
      },
      "description" : "Set netmask when dynamic",
      "nodeStep" : true,
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "nic-0-mask",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        } ]
      },
      "type" : "localexec"
    }, {
      "configuration" : {
        "command" : "bash -c 'if [ \"${option.vnic-1-static}\" != \"static\" ]; then echo \"255.255.255.0\"; else true; fi'"
      },
      "description" : "Set netmask when dynamic",
      "nodeStep" : true,
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "nic-1-mask",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        } ]
      },
      "type" : "localexec"
    }, {
      "configuration" : {
        "command" : "bash -c 'if [ \"${option.vmware-esx-host}\" == \"-ESXHOST-\" ]; then echo \"\"; else echo \"${option.vmware-esx-host}\"; fi'"
      },
      "description" : "Set host type - ESX or vCenter",
      "nodeStep" : true,
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "esx-host",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        } ]
      },
      "type" : "localexec"
    }, {
      "description" : "create govc command line",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "command-line",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        } ]
      },
      "script" : "export GOVC_URL=@option.vcenter-host@ \nexport GOVC_USERNAME=@option.vcenter-username@ \nexport GOVC_PASSWORD=@option.vcenter-password@ \nexport GOVC_INSECURE=1 \nspec=$(govc import.spec \"@export.cnc-image@\" | jq -c '.PropertyMapping[] |= del(select(.Key|test(\"^NBI.\")))')  \n\n# Property Mappings\nchanged=$(echo $spec | jq -c '( .PropertyMapping[]|select(.Key==\"ManagementIPv4Address\") ).Value|= \"@data.nic-0-ip*@@export.ip-1@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"ManagementIPv4Netmask\") ).Value|= \"@data.nic-0-mask*@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"ManagementIPv4Gateway\") ).Value|= \"@data.nic-0-gw*@@export.gw-1@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"DataIPv4Address\") ).Value|= \"@option.vnic-1-ip@@export.ip-2@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"DataIPv4Netmask\") ).Value|= \"@option.vnic-1-mask@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"DataIPv4Gateway\") ).Value|= \"@option.vnic-1-gateway@@export.gw-2@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"CWUsername\") ).Value|= \"cw-admin\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"CWPassword\") ).Value|= \"@option.cw-admin-password@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"Timezone\") ).Value|= \"@option.timzone*@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"DNSv4\") ).Value|= \"@data.dns-servers*@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"NTP\") ).Value|= \"@data.ntp-servers*@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"Domain\") ).Value|= \"@option.domain-name@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"ramdisk\") ).Value|= \"2\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"bckup_min_percent\") ).Value|= \"@option.backup-percentage@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"Disclaimer\") ).Value|= \"@option.disclaimer@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"VMType\") ).Value|= \"@option.node-type@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"IsSeed\") ).Value|= \"@option.seed-node@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"ManagementVIP\") ).Value|= \"@export.mgtvip@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"ManagementVIPName\") ).Value|= \"@export.mgtdns@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"DataVIP\") ).Value|= \"@export.datavip@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"DataVIPName\") ).Value|= \"@export.datadns@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"CwInstaller\") ).Value|= \"False\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"InitNodeCount\") ).Value|= \"@option.initial-node-count@\"') \nchanged=$(echo $changed | jq -c '( .PropertyMapping[]|select(.Key==\"InitMasterCount\") ).Value|= \"@option.initial-master-count@\"') \n\n# Deleted Property Mappings\nchanged=$(echo $changed | jq -c 'del(.PropertyMapping[]|select(.Key==\"NBIVIP\"))' )\n\n# Network Mapping Properties\nchanged=$(echo $changed | jq -c '( .NetworkMapping[]|select(.Name==\"Management Network\") ).Network|= \"@data.vnic-1-network*@\"') \n#changed=$(echo $changed | jq -c '( .NetworkMapping[]|select(.Name==\"Data Network\") ).Network|= \"@data.vnic-2-network*@\"') \n\n# General Properties thin\nchanged=$(echo $changed | jq -c '.DiskProvisioning=\"@option.disk-mode@\"') \nchanged=$(echo $changed | jq -c '.Deployment=\"@option.deployment-option@\"') \nchanged=$(echo $changed | jq -c '.IPAllocationPolicy=\"fixedPolicy\"') \nchanged=$(echo $changed | jq -c '.Annotation=\"Simon Did This\"') \nchanged=$(echo $changed | jq -c '.InjectOvfEnv=true') \nchanged=$(echo $changed | jq -c '.Name=\"@data.host-name*@\"') \necho $changed \necho $changed > /opt/cw/tmp/@job.execid@\n\nesxhost=$(basename @data.esx-host*@ )\n\necho govc import.ova -ds='\"'@data.datastore*@'\"' -host='\"'$esxhost'\"' -name='\"'@data.host-name*@'\"' -options='\"'/opt/cw/tmp/@job.execid@'\"' '\"'@export.cnc-image@'\"'\n\n\n"
    }, {
      "configuration" : {
        "command" : "bash -c 'if [ \"${option.Option}\" == \"Execute\" ]; then false; else true; fi'"
      },
      "description" : "If option is Execute, then run the command",
      "errorhandler" : {
        "keepgoingOnSuccess" : true,
        "script" : "export GOVC_URL=@option.vcenter-host@ \nexport GOVC_USERNAME=@option.vcenter-username@ \nexport GOVC_PASSWORD=@option.vcenter-password@ \nexport GOVC_INSECURE=1 \n\nif [ \"@option.overwrite@\" == \"true\" ] \nthen\n    echo Destroying existing VM\n    govc vm.destroy \"@data.host-name*@\"\nfi\n\nenv\necho @data.command-line*@\n@data.command-line*@ > /dev/null\ngovc vm.change -vm \"@data.host-name*@\" -c=@option.deployment-size-cpu@ -m=@option.deployment-size-mem@\ngovc vm.change -vm \"@data.host-name*@\" -annotation \"Deployed by rundeck job: @job.execid@. Image file:@export.cnc-image@\"\ngovc vm.power -on \"@data.host-name*@\""
      },
      "nodeStep" : true,
      "type" : "localexec"
    }, {
      "description" : "Find the POD name from IP",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "pod-name",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        }, {
          "config" : {
            "datatype" : "application/json",
            "sanitizeHtml" : "true",
            "striped" : "true"
          },
          "type" : "render-datatype"
        } ]
      },
      "script" : "jq '.[] | select(.value==\"@option.controller-vip@\") | .tag' /opt/cw/options/cw-environments.json | tr -d '\"'"
    }, {
      "description" : "create node",
      "jobref" : {
        "args" : "-node-name ${data.host-name*} -hostname ${data.nic-0-ip*} -description \"CNC node\" -user-name cw-admin -tags \"cnc,${data.pod-name*}\" -password-storage-path keys/cw/cw-admin",
        "group" : "Rundeck Nodes",
        "name" : "Create a New node",
        "uuid" : "e60e849d-c7c2-430e-a545-a2fb9b0a6c61"
      }
    } ],
    "keepgoing" : false,
    "strategy" : "sequential"
  },
  "timeout" : "4h",
  "uuid" : "7004679b-f998-4869-b3e1-4d7d34e9f9c2"
} ]
