[ {
  "defaultTab" : "nodes",
  "description" : "",
  "executionEnabled" : true,
  "group" : "NSO/Configure",
  "id" : "ac000c0b-c609-4f7c-b701-2f656fa2b6fd",
  "loglevel" : "INFO",
  "multipleExecutions" : true,
  "name" : "- nso configure",
  "nodeFilterEditable" : false,
  "options" : [ {
    "description" : "[Create POD](00a7b4c3-dc1b-4a1a-b4fd-e1f396281b2f) | [Remove POD](e192c0e9-94be-4e0c-ae4a-578e3d0018f5) | [Show PODs](b0afa385-7f61-4852-a2fb-a2ca0ce8e2f7)\n> /opt/cw/options/cw-environments.json",
    "enforced" : true,
    "label" : "CNC POD",
    "name" : "pod",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/cw-environments.json"
  }, {
    "description" : "[Add Version](1feb2b38-194d-4427-b9e9-b3c1a031a9b6) | [Show Versions](87932153-4882-4b5e-bc8e-321615baa3d6) | [Remove Version](96b47113-9d8d-4841-8e69-3755d9885e2f)\n> /opt/cw/options/cw-versions.json\n\n> This will determine the NSO version, based on contents of directory",
    "enforced" : true,
    "label" : "Crosswork Version",
    "name" : "cw-version",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/options/cw-versions.json"
  }, {
    "enforced" : true,
    "label" : "Rundeck node",
    "name" : "node",
    "required" : true,
    "valuesUrl" : "file:/opt/cw/nodes.json"
  }, {
    "enforced" : true,
    "label" : "Location of software (local or http)",
    "name" : "software-location",
    "required" : true,
    "value" : "http",
    "values" : [ "http", "local" ],
    "valuesListDelimiter" : ","
  }, {
    "description" : "> Execute the script or just build it to be run manually.",
    "enforced" : true,
    "label" : "Execute or Build",
    "name" : "execute",
    "required" : true,
    "value" : "build",
    "values" : [ "build", "execute" ],
    "valuesListDelimiter" : ","
  }, {
    "enforced" : true,
    "label" : "Save for later execution?",
    "name" : "save",
    "required" : true,
    "value" : "no",
    "values" : [ "no", "yes" ],
    "valuesListDelimiter" : ","
  }, {
    "enforced" : true,
    "name" : "package-manager",
    "required" : true,
    "value" : "apt",
    "values" : [ "yum", "apt" ],
    "valuesListDelimiter" : ","
  }, {
    "enforced" : true,
    "label" : "Enable package authentication?",
    "name" : "package-authentication",
    "required" : true,
    "value" : "false",
    "values" : [ "true", "false" ],
    "valuesListDelimiter" : ","
  }, {
    "label" : "Crosswork user password",
    "name" : "cwpass",
    "required" : true,
    "value" : "cisco!123"
  }, {
    "label" : "Crosswork User Account",
    "name" : "cwuser",
    "required" : true,
    "value" : "cwuser"
  }, {
    "name" : "https-port",
    "value" : "8888"
  }, {
    "name" : "http-port",
    "value" : "8080"
  }, {
    "name" : "netconf-port",
    "required" : true,
    "value" : "2022"
  }, {
    "enforced" : true,
    "label" : "Version of Python to install",
    "name" : "python-ver",
    "required" : true,
    "value" : "3.8.12",
    "values" : [ "3.8.12" ],
    "valuesListDelimiter" : ","
  }, {
    "delimiter" : ",",
    "label" : "Which steps to run",
    "multivalued" : true,
    "name" : "step",
    "value" : "updates,python,java,nsocopy,nsofpcopy,nsonedcopy,nsoremove,nsoinstall,xmlupdate,quietyum",
    "values" : [ "updates", "python", "java", "nsocopy", "nsofpcopy", "nsonedcopy", "nsoremove", "nsoinstall", "xmlupdate", "quietyum" ],
    "valuesListDelimiter" : ","
  }, {
    "enforced" : true,
    "hidden" : true,
    "name" : "buildpath",
    "required" : true,
    "value" : "/tmp/software",
    "values" : [ "/tmp/software" ],
    "valuesListDelimiter" : ","
  } ],
  "plugins" : {
    "ExecutionLifecycle" : { }
  },
  "retry" : "0",
  "scheduleEnabled" : true,
  "sequence" : {
    "commands" : [ {
      "description" : "POD Properties",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "true",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "jq -r '.[] | select(.value==\"@option.pod@\") | to_entries[] | [((\"pod-\"+.key)|tostring),(.value|tostring)]|join(\"=\")' /opt/cw/options/cw-environments.json\n"
    }, {
      "description" : "Other Properties",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "true",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "# CNC Version info\njq -r '.[] | select(.value==\"@option.cw-version@\") | to_entries[] | [((\"cnc-version-\"+.key)|tostring),(.value|tostring)]|join(\"=\")' /opt/cw/options/cw-versions.json\n"
    }, {
      "description" : "parse input options",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "false",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "echo @option.step@ | jq --raw-input --raw-output 'split(\",\")[] | [.,\"true\"]|join(\"=\")'\n"
    }, {
      "description" : "Batch script name",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "false",
            "logData" : "false",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "batchfile=/opt/cw/tmp/${RD_OPTION_POD}_NSO_@option.cw-version@-install-@job.execid@.sh\nbfile=${RD_OPTION_POD}_NSO_@option.cw-version@-install-@job.execid@.sh\necho batchfile=${batchfile}\necho bfile=${bfile}\necho '#!/bin/bash' > ${batchfile}"
    }, {
      "description" : "Set variables",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "true",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "#batchfile=/tmp/${RD_OPTION_POD}_NSO_@option.cw-version@-install.sh\n#echo batchfile=${batchfile}\necho '#!/bin/bash' > ${batchfile}\nif [ \"@data.quietyum@\" == \"true\" ]\nthen \n    echo yumcmd=\"-qq\"\nelse\n    echo yumcmd=\" \"\nfi\n\nnodefile=/opt/cw/nodes/@option.node@.json\njq -r '.[]|to_entries[] |  [.key,.value|tostring]|join(\"=\")' $nodefile\n\necho ncsrundir='{NCS_RUN_DIR}'\n"
    }, {
      "description" : "create directories",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "true",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "echo 'mkdir /tmp/software' >> @data.batchfile*@\n"
    }, {
      "description" : "determine location of software",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "false",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "if [ \"@option.software-location@\" == \"http\" ]\nthen\n    echo nsopath=@data.cnc-version-location-http*@\nfi\nif [ \"@option.software-location@\" == \"local\" ]\nthen\n    echo nsopath=@data.cnc-version-location-scp*@\nfi\n"
    }, {
      "description" : "copy files?",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "false",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "if [ \"@data.nsocopy*@\" == \"true\" ]\nthen\n    echo nsofilepath=@data.nsopath*@/nso-core\n    echo wget -r -nH -nd @data.nsopath*@/nso-core -P @option.buildpath@/nso-core >> @data.batchfile*@\n    # wget -r -nH -nd 10.67.22.133:8002/cnc/7.0/nso-core -P nso-core\nelse \n    echo nsofilepath=/dev/null\nfi\n\nif [ \"@data.nsofpcopy*@\" == \"true\" ]\nthen\n    echo nsofpfilepath=@data.nsopath*@/nso-fp\n    echo wget -r -nH -nd @data.nsopath*@/nso-fp -P @option.buildpath@/nso-fp >> @data.batchfile*@\nelse \n    echo nsofpfilepath=/dev/null\nfi\n\nif [ \"@data.nsonedcopy*@\" == \"true\" ]\nthen\n    echo nedfilepath=@data.nsopath*@/nso-neds\n    echo wget -r -nH -nd @data.nsopath*@/nso-neds -P @option.buildpath@/nso-neds >> @data.batchfile*@\nelse \n    echo nedfilepath=/dev/null\nfi"
    }, {
      "description" : "Find management IP",
      "exec" : "echo ${option.nso-ip}",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "invalidKeyPattern" : "\\s|\\$|\\{|\\}|\\\\",
            "logData" : "true",
            "name" : "ip",
            "regex" : "(.*)"
          },
          "type" : "key-value-data"
        } ]
      }
    }, {
      "description" : "Install init scripts",
      "script" : "    echo --- 1/1 init.d package\n    echo @option.package-manager@ @data.yumcmd*@ -y install initscripts >> @data.batchfile*@\n    "
    }, {
      "description" : "Install updates and packages",
      "script" : "if [ \"@data.updates*@\" == \"true\" ]\n#echo dbtch=@data.batchfile*@\nthen \n\n    echo --- 1/7 APT update\n    echo @option.package-manager@ @data.yumcmd*@ update -y >> @data.batchfile*@\n    echo --- 2/7 yum yum-utils\n    #echo '@option.system-user-password@' | sudo -S apt install -y yum-utils\n    echo --- 3/7 Updates 1\n    echo @option.package-manager@ @data.yumcmd*@ -y install software-properties-common   >> @data.batchfile*@  \n    echo @option.package-manager@ @data.yumcmd*@ -y install aptitude   >> @data.batchfile*@  \n    echo @option.package-manager@ @data.yumcmd*@ -y install iputils-ping  >> @data.batchfile*@   \n    echo @option.package-manager@ @data.yumcmd*@ -y install iputils-arping  >> @data.batchfile*@   \n    echo @option.package-manager@ @data.yumcmd*@ -y install iproute2   >> @data.batchfile*@  \n    echo @option.package-manager@ @data.yumcmd*@ -y install sshpass  >> @data.batchfile*@    \n    echo @option.package-manager@ @data.yumcmd*@ -y install chkconfig  >> @data.batchfile*@\n    echo --- 3/7 Open VM Tools\n    echo @option.package-manager@ @data.yumcmd*@ -y install open-vm-tools >> @data.batchfile*@\n    echo --- 4/7 xmlstarlet\n    echo @option.package-manager@ @data.yumcmd*@ -y install xmlstarlet >> @data.batchfile*@\n    echo --- 5/7 jq    \n    echo @option.package-manager@ @data.yumcmd*@ -y install jq >> @data.batchfile*@\n    echo --- 6/7 development tools\n    echo @option.package-manager@ @data.yumcmd*@ -y install build-essential >> @data.batchfile*@\n    echo @option.package-manager@ @data.yumcmd*@ -y install make >> @data.batchfile*@\n    echo @option.package-manager@ @data.yumcmd*@ -y install ant >> @data.batchfile*@\n    echo @option.package-manager@ @data.yumcmd*@ -y install xsltproc >> @data.batchfile*@\n    echo @option.package-manager@ @data.yumcmd*@ -y install ibreadline-dev\n    echo @option.package-manager@ @data.yumcmd*@ -y install libncursesw5-dev >> @data.batchfile*@\n    echo @option.package-manager@ @data.yumcmd*@ -y install libssl-dev >> @data.batchfile*@\n    echo @option.package-manager@ @data.yumcmd*@ -y install libsqlite3-dev >> @data.batchfile*@\n    echo @option.package-manager@ @data.yumcmd*@ -y install tk-dev >> @data.batchfile*@\n    echo @option.package-manager@ @data.yumcmd*@ -y install libgdbm-dev >> @data.batchfile*@\n    echo @option.package-manager@ @data.yumcmd*@ -y install libc6-dev >> @data.batchfile*@\n    echo @option.package-manager@ @data.yumcmd*@ -y install libbz2-dev >> @data.batchfile*@\n    echo @option.package-manager@ @data.yumcmd*@ -y install libffi-dev >> @data.batchfile*@\n    echo @option.package-manager@ @data.yumcmd*@ -y install zlib1g-devibreadline-dev >> @data.batchfile*@ \n    echo @option.package-manager@ @data.yumcmd*@ -y install libncursesw5-dev >> @data.batchfile*@ \n    echo @option.package-manager@ @data.yumcmd*@ -y install libssl-dev >> @data.batchfile*@ \n    echo @option.package-manager@ @data.yumcmd*@ -y install libsqlite3-dev >> @data.batchfile*@ \n    echo @option.package-manager@ @data.yumcmd*@ -y install tk-dev  >> @data.batchfile*@\n    echo @option.package-manager@ @data.yumcmd*@ -y install libgdbm-dev  >> @data.batchfile*@\n    echo @option.package-manager@ @data.yumcmd*@ -y install libc6-dev  >> @data.batchfile*@\n    echo @option.package-manager@ @data.yumcmd*@ -y install libbz2-dev >> @data.batchfile*@ \n    echo @option.package-manager@ @data.yumcmd*@ -y install libffi-dev \n    echo @option.package-manager@ @data.yumcmd*@ -y install zlib1g-dev >> @data.batchfile*@\n    echo --- 6/7 pip \n    echo @option.package-manager@ @data.yumcmd*@ -y install python3-pip  >> @data.batchfile*@\n\nelse \n    echo Skipping updates ...\n    \nfi"
    }, {
      "description" : "Install python",
      "script" : "if [ \"@data.python*@\" == \"true\" ]\nthen \n\n    echo --- 1/1 python 3\n    #echo '@option.system-user-password@' | sudo -S yum -y install \"https://repo.ius.io/ius-release-el$(rpm -E '%{rhel}').rpm\"\n    #echo '@option.system-user-password@' | sudo -S yum update -y\n    #echo '@option.system-user-password@' | sudo -S yum install -y python3\n    #python --version\n    #echo '@option.system-user-password@' | sudo -S alternatives --install /usr/bin/python python /usr/bin/python2 50\n    #echo '@option.system-user-password@' | sudo -S alternatives --install /usr/bin/python python /usr/bin/python3 60\n    #python --version\n    echo cd /tmp >> @data.batchfile*@\n    echo wget https://www.python.org/ftp/python/@option.python-ver@/Python-@option.python-ver@.tgz >> @data.batchfile*@\n    echo tar xvf Python-@option.python-ver@.tgz >> @data.batchfile*@\n    echo cd Python-@option.python-ver@ >> @data.batchfile*@\n    echo ./configure --enable-optimizations  >> @data.batchfile*@\n    echo make altinstall >> @data.batchfile*@\n    echo rsync -var /tmp/Python-@option.python-ver@ /usr/local/bin/  >> @data.batchfile*@\n    echo rm -f /usr/bin/python3 >> @data.batchfile*@\n    echo ln -s /usr/local/bin/Python-@option.python-ver@/python /usr/bin/python3 >> @data.batchfile*@\n\nelse\n    echo Skipping ..\n\n\nfi\n"
    }, {
      "description" : "Install java",
      "script" : "echo --- 4/7 java\nif [ \"@data.java*@\" == \"true\" ]\nthen\n    #echo @option.package-manager@ install @data.yumcmd*@ -y openjdk-17-jdk openjdk-17-jre >> @data.batchfile*@\n    echo 'wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.rpm' >> @data.batchfile*@\n    echo rpm -Uvh jdk-17_linux-x64_bin.rpm>> @data.batchfile*@\n\nelse\n    echo Skipping Java ...\nfi\n\n"
    }, {
      "description" : "reload daemon",
      "exec" : "echo sysctl -p >> ${data.batchfile*}"
    }, {
      "description" : "Undo NSO setup",
      "script" : "if [ \"@data.nsoremove*@\" == \"true\" ]\nthen \n    echo 'if [ -f /opt/ncs/current/ncsrc ]; then source /opt/ncs/current/ncsrc; /opt/ncs/current/bin/ncs-uninstall --all --non-interactive || true; fi' >> @data.batchfile*@\n    #echo /opt/ncs/current/bin/ncs-uninstall --all --non-interactive || true >> @data.batchfile*@\n\nelse\n    echo Skipping NSO Removal ...\n\nfi"
    }, {
      "description" : "unpack and install NSO",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "false",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "# Unpack binary\necho '#Unpack and install NSO'  >> @data.batchfile*@\necho cd @option.buildpath@ >> @data.batchfile*@\necho 'nsosigned=`basename \\$(ls @option.buildpath@/nso-core/nso*signed.bin)`' >> @data.batchfile*@\necho cd @option.buildpath@/nso-core >> @data.batchfile*@\necho sh \\$nsosigned --skip-verification >> @data.batchfile*@\necho 'nsoinstall=`basename \\$(ls @option.buildpath@/nso-core/nso-*installer.bin)`' >> @data.batchfile*@\n\necho nso-signed=\\$nsosigned >> @data.batchfile*@\necho nso-install=\\$nsoinstall >> @data.batchfile*@\n\n# Install NSO\necho sh \\$nsoinstall --system-install >> @data.batchfile*@\n"
    }, {
      "description" : "unpack Function packs and NEDs",
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "captureMultipleKeysValues" : "true",
            "hideOutput" : "false",
            "logData" : "true",
            "regex" : "^(.+?)\\s*=\\s*(.+)"
          },
          "type" : "key-value-data-multilines"
        } ]
      },
      "script" : "###### Unpack binary\necho cd @option.buildpath@/nso-fp >> @data.batchfile*@\n\necho ncasigned='`basename $(ls @option.buildpath@/nso-fp/signed-*functionpacks*)`' >> @data.batchfile*@\n\n# extract level one package\necho tar -xvf \\$ncasigned >> @data.batchfile*@\n\n# extract level two package\necho 'ncaunsigned=`basename $(ls @option.buildpath@/nso-fp/cw-na*)`' >> @data.batchfile*@\necho tar -xvf \\$ncaunsigned >> @data.batchfile*@\n\n### echo nsosigned='`basename $(ls @option.buildpath@/nso-fp/signed*.gz | grep signed-*.gz)`' >> @data.batchfile*@\n\n###### Unpack the function packs\n\necho 'for i in *-nso*.tar.gz; do tar -xvf $i; done' >> @data.batchfile*@\n\n## Copy the standalone packages to packages directory\necho 'for i in `ls -d */`; do \\cp -r $(basename $i)/standalone/packages/*.tar.gz /opt/ncs/packages; done' >> @data.batchfile*@\n\n###### NSO NEDS\necho cd @option.buildpath@/nso-neds >> @data.batchfile*@\n\necho 'find . -maxdepth 1 -type f -iname \"*.bin\" -exec sh {} --skip-verification \\;' >> @data.batchfile*@\n#echo `find . -maxdepth 1 -type f -iname \"*.tar.gz\" -exec tar -xvf {}` >> @data.batchfile*@\n\n#echo 'for i in *.bin; do sh $i --skip-verification; true; done' >> @data.batchfile*@\n#echo 'for i in *.tar.gz; do tar -xvf $i; true; done' >> @data.batchfile*@\n\necho '\\cp *.tar.gz /opt/ncs/packages' >> @data.batchfile*@\n\n## Create the symbolic links\necho 'for i in `ls /opt/ncs/packages/*.tar.gz `; do ln -s $i /var/opt/ncs/packages/$(basename $i); true; done' >> @data.batchfile*@\n"
    }, {
      "description" : "add security options to /etc/security/limits.conf",
      "script" : "echo \"sed -i '/^# End of file/i * soft nproc 65535' /etc/security/limits.conf\" >> @data.batchfile*@\necho \"sed -i '/^# End of file/i * hard nproc 65535' /etc/security/limits.conf\" >> @data.batchfile*@\necho \"sed -i '/^# End of file/i * soft nofile 65535' /etc/security/limits.conf\" >> @data.batchfile*@\necho \"sed -i '/^# End of file/i * hard nofile 65535' /etc/security/limits.conf\" >> @data.batchfile*@\necho \"sed -i '/^# End of file/i * hard memlock 65535' /etc/security/limits.conf\" >> @data.batchfile*@ \necho \"sed -i '/^# End of file/i * soft memlock 65535' /etc/security/limits.conf\" >> @data.batchfile*@"
    }, {
      "description" : "add ulimit to /etc/init.d/ncs",
      "script" : "echo \"sed -i '/^prog=ncs/i ulimit -n 64000' /etc/init.d/ncs\" >> @data.batchfile*@\n"
    }, {
      "description" : "update XML",
      "script" : "if [ \"@data.xmlupdate*@\" == \"true\" ]\nthen \n\n    echo xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:aaa/x:local-authentication/x:enabled' --value 'true' /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:enabled' --value 'true' /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:transport/x:tcp/x:enabled' --value 'true' /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:transport/x:tcp/x:ip' --value @data.hostname*@  /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:transport/x:ssl/x:enabled' --value 'true' /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:transport/x:ssl/x:port' --value @option.https-port@  /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:webui/x:transport/x:ssl/x:ip' --value @data.hostname*@  /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:restconf/x:enabled' --value 'true' /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:netconf-north-bound/x:enabled' --value 'true' /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:netconf-north-bound/x:transport/x:ssh/x:enabled' --value 'true' /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:netconf-north-bound/x:transport/x:ssh/x:ip' --value @data.hostname*@ /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:cli/x:ssh/x:enabled' --value 'true' /etc/ncs/ncs.conf >> @data.batchfile*@\n\n    echo xmlstarlet edit --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update '/x:ncs-config/x:cli/x:ssh/x:ip' --value @data.hostname*@  /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --update \"/x:ncs-config/x:notifications/x:event-streams/x:stream[x:name='service-state-changes']/x:builtin-replay-store/x:enabled\" -v 'true' /etc/ncs/ncs.conf >> @data.batchfile*@\n\n    # ssh encryption\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config\" -type elem -n \"ssh-tmp\"   /etc/ncs/ncs.conf >> @data.batchfile*@    \n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:ssh-tmp\" -type elem -n \"algorithms\"  /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:ssh-tmp/x:algorithms\" -type elem -n \"kex\" -v \"diffie-hellman-group14-sha1\" /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:ssh-tmp/x:algorithms\" -type elem -n \"mac\" -v \"hmac-sha2-512,hmac-sha2-256,hmac-sha1\" /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:ssh-tmp/x:algorithms\" -type elem -n \"encryption\" -v \"aes128-ctr,aes192-ctr,aes256-ctr\" /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config -r \"/x:ncs-config/x:ssh-tmp\" -v \"ssh\" /etc/ncs/ncs.conf >> @data.batchfile*@\n\n    # new subscription\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:notifications/x:event-streams\" -type elem -n \"tmp-stream\"   /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:notifications/x:event-streams/x:tmp-stream\" -type elem -n \"name\" -v \"service-aa-changes\"   /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:notifications/x:event-streams/x:tmp-stream\" -type elem -n \"description\" -v \\\"Notifications relating to the service aa configuration change\\\"   /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:notifications/x:event-streams/x:tmp-stream\" -type elem -n \"replay-support\" -v \"true\"   /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:notifications/x:event-streams/x:tmp-stream\" -type elem -n \"builtin-replay-store\"    /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:notifications/x:event-streams/x:tmp-stream/x:builtin-replay-store\" -type elem -n \"enabled\" -v \"true\"    /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:notifications/x:event-streams/x:tmp-stream/x:builtin-replay-store\" -type elem -n \"dir\" -v \\'\\$@data.ncsrundir*@/state\\' /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:notifications/x:event-streams/x:tmp-stream/x:builtin-replay-store\" -type elem -n \"max-size\" -v 'S10M'    /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:notifications/x:event-streams/x:tmp-stream/x:builtin-replay-store\" -type elem -n \"max-files\" -v '50' /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config -r \"/x:ncs-config/x:notifications/x:event-streams/x:tmp-stream\" -v \"stream\" /etc/ncs/ncs.conf >> @data.batchfile*@\n    # package authentication\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:aaa\" -type elem -n \"package-authentication\"   /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:aaa/x:package-authentication\" -type elem -n \"enabled\" -v \"@option.package-authentication@\"   /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:aaa/x:package-authentication\" -type elem -n \"packages\"  /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:aaa/x:package-authentication/x:packages\" -type elem -n \"package\" -v \"cisco-cfp-jwt-auth\"   /etc/ncs/ncs.conf >> @data.batchfile*@\n   \n\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config -s \"/x:ncs-config\" -t elem -n \"tmp-hide-group\"   /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:tmp-hide-group\" --type elem --name \"name\" -v \"tsdn\" -r \"/x:ncs-config/x:tmp-hide-group\" -v hide-group  /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config -s \"/x:ncs-config\" -t elem -n \"tmp-hide-group\"    /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:tmp-hide-group\" --type elem --name \"name\" -v \"fastmap-private\" -r \"/x:ncs-config/x:tmp-hide-group\" -v hide-group  /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config -s \"/x:ncs-config\" -t elem -n \"tmp-hide-group\"   /etc/ncs/ncs.conf >> @data.batchfile*@\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:tmp-hide-group\" --type elem --name \"name\" -v \"debug\" -r \"/x:ncs-config/x:tmp-hide-group\" -v hide-group  /etc/ncs/ncs.conf     >> @data.batchfile*@\n\n    echo xmlstarlet ed --inplace -N x=http://tail-f.com/yang/tailf-ncs-config --subnode \"/x:ncs-config/x:python-vm\" --type elem --name \"start-timeout\" -v \"PT300S\"  /etc/ncs/ncs.conf >> @data.batchfile*@\n\nelse\n    echo Skipping XML Updates ...\nfi"
    }, {
      "description" : "Create ncsadmin group",
      "exec" : "echo groupadd ncsadmin >> ${data.batchfile*}"
    }, {
      "description" : "enable ncs",
      "exec" : "echo systemctl enable ncs >> ${data.batchfile*}"
    }, {
      "description" : "add user to group",
      "script" : "echo 'usermod -a -G ncsadmin $(whoami)' >> @data.batchfile*@"
    }, {
      "description" : "add firewall exception for HTTPS",
      "exec" : "echo firewall-cmd --zone=public --permanent --add-port ${option.https-port}/tcp \\|\\| true >> ${data.batchfile*}"
    }, {
      "description" : "add firewall exception for HTTP",
      "exec" : "echo firewall-cmd --zone=public --permanent --add-port ${option.http-port}/tcp \\|\\| true >> ${data.batchfile*}"
    }, {
      "description" : "add firewall exception for netconf",
      "exec" : "echo firewall-cmd --zone=public --permanent --add-port ${option.netconf-port}/tcp \\|\\| true >> ${data.batchfile*}"
    }, {
      "description" : "reload firewalld",
      "exec" : "echo firewall-cmd --reload \\|\\| true >> ${data.batchfile*}"
    }, {
      "description" : "add cwuser and set password",
      "script" : "echo useradd @option.cwuser@ >> @data.batchfile*@\necho 'echo @option.cwuser@:@option.cwpass@ | chpasswd' >> @data.batchfile*@"
    }, {
      "description" : "add cwuser to ncsadmin",
      "exec" : "echo usermod -aG ncsadmin,sudo ${option.cwuser} >> ${data.batchfile*}"
    }, {
      "description" : "Create and import additional data ",
      "script" : "echo source /opt/ncs/current/ncsrc >> @data.batchfile*@\necho mkdir -p /tmp/nso_load >> @data.batchfile*@\n# Create NSO security algorithms for import\necho 'echo '\"'<devices xmlns=\\\"http://tail-f.com/ns/ncs\\\"><global-settings><ssh-algorithms><public-key>ssh-ed25519</public-key><public-key>ecdsa-sha2-nistp256</public-key><public-key>ecdsa-sha2-nistp384</public-key><public-key>ecdsa-sha2-nistp521</public-key><public-key>rsa-sha2-512</public-key><public-key>rsa-sha2-256</public-key><public-key>ssh-rsa</public-key></ssh-algorithms></global-settings></devices>'\"' > /tmp/nso_load/algos.xml' >> @data.batchfile*@\necho 'echo '\"'<nacm xmlns=\\\"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\\\"><groups><group><name>ncsadmin</name><user-name>@option.cwuser@</user-name></group></groups></nacm>'\"' > /tmp/nso_load/nacm.xml' >> @data.batchfile*@\n"
    }, {
      "description" : "start NSO with packages reload",
      "script" : "echo source /opt/ncs/current/ncsrc >> @data.batchfile*@\n#NCS_RELOAD_PACKAGES=force /etc/init.d/ncs restart\n#echo '/etc/init.d/ncs restart-with-package-reload' >> @data.batchfile*@\necho 'systemctl restart ncs' >> @data.batchfile*@\n\n\n"
    }, {
      "description" : "load bootstrap data",
      "script" : "echo source /opt/ncs/current/ncsrc >> @data.batchfile*@\n#runfile=/tmp/bootstrap.sh\necho 'runfile=/tmp/bootstrap.sh' >> @data.batchfile*@\n\n#\"echo '@option.system-user-password@' | sudo -S  sh -c 'cd /opt/ncs/packages/*@data.nso-ver*@*/tsdn/bootstrap-data; for i in `ls *.xml`; do ncs_load -l -m -F x \"$i\";  done'\"\necho 'echo #!/bin/sh > '\\$runfile >> @data.batchfile*@\necho 'echo source /opt/ncs/current/ncsrc >> '\\$runfile >> @data.batchfile*@\necho 'echo '\"'for folder in \\`find @option.buildpath@/* -type d -iname \\\"bootstrap-data\\\" | grep -i standalone\\`; do pushd \\\"\\$folder\\\"; for file in *.xml; do echo \\\"loading \\$file\\\";  ncs_load -l -m -F x \\\"\\$file\\\"; done; popd; done'\"' >> $runfile' >> @data.batchfile*@\n\necho bash '/tmp/bootstrap.sh' >> @data.batchfile*@\n\n# Load other data\necho 'echo '\"'for file in \\`find /tmp/nso_load/ -type f -iname \\\"*.xml\\\"\\`; do echo \\\"loading \\$file\\\"; ncs_load -l -m -F x \\\"\\$file\\\"; done'\"' >> $runfile' >> @data.batchfile*@\n"
    }, {
      "description" : "Run or show contents of file",
      "script" : "if [ \"@option.execute@\" == \"execute\" ]\nthen \n   sh \"@data.batchfile*@\" \nelse\n    cat \"@data.batchfile*@\"\nfi "
    }, {
      "description" : "Save deployment details for later",
      "script" : "fileout=/opt/cw/deploy/nso-deployments.json\n\n\nif [ ! -f \"$fileout\" ]; then echo \"[]\" > \"$fileout\"; fi\n\nif [ \"@option.save@\" == \"no\" ]\nthen\n    true   \nelse \n    dt=$(date +\"%Y-%m-%d-%H-%M-%S\")\n    d=$(date +\"%Y-%m-%d\")\n    key=\"$d-@data.pod-value*@-@data.pod-pod-type*@-@option.cw-version@-[@option.node@]-@job.execid@\"\necho key=$key\n    key=$(jq -n --arg key $key '{\"name\":$key}')\necho key:$key\n    cli=$(echo '@data.batchfile*@' | jq --raw-input '{\"command-line\":.|tostring} | {\"data\":.}')\necho cli:$cli\n    data=$(echo $key $cli | jq -s '.' | jq .)\necho data:$data\n    options=$(echo '@option.step@' | jq --raw-input '[split(\",\") | to_entries[] | del(.key)] |  map( { (.value|tostring): \"true\" } ) | add ')\necho options:$options    \n    data=$(echo $data | jq --arg date $dt --argjson options \"$options\" '(..|objects|select(has(\"data\"))).data+={\"dttm\":$date,\"version\":\"@option.cw-version@\",\"script\":\"@data.batchfile*@\",\"node\":\"@option.node@\",\"options\":$options}')\necho data2:$data \n    data=$(echo $data | jq ' .[0][] as $name | .[1][] as $value | {\"name\":$name,\"value\":\"@data.bfile*@\",\"data\":$value}')\necho data3:$data     \n    existing=$(jq -c . $fileout)\n    echo $data $existing | jq -s 'flatten(1)' > $fileout\n  \nfi"
    } ],
    "keepgoing" : true,
    "strategy" : "sequential"
  },
  "timeout" : "12h",
  "uuid" : "ac000c0b-c609-4f7c-b701-2f656fa2b6fd"
} ]
